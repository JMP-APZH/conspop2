
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model MartiniqueCity
 * 
 */
export type MartiniqueCity = $Result.DefaultSelection<Prisma.$MartiniqueCityPayload>
/**
 * Model DiasporaLocation
 * 
 */
export type DiasporaLocation = $Result.DefaultSelection<Prisma.$DiasporaLocationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const CityAgglomeration: {
  CENTRE: 'CENTRE',
  NORD: 'NORD',
  SUD: 'SUD'
};

export type CityAgglomeration = (typeof CityAgglomeration)[keyof typeof CityAgglomeration]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type CityAgglomeration = $Enums.CityAgglomeration

export const CityAgglomeration: typeof $Enums.CityAgglomeration

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more MartiniqueCities
 * const martiniqueCities = await prisma.martiniqueCity.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more MartiniqueCities
   * const martiniqueCities = await prisma.martiniqueCity.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.martiniqueCity`: Exposes CRUD operations for the **MartiniqueCity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MartiniqueCities
    * const martiniqueCities = await prisma.martiniqueCity.findMany()
    * ```
    */
  get martiniqueCity(): Prisma.MartiniqueCityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.diasporaLocation`: Exposes CRUD operations for the **DiasporaLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiasporaLocations
    * const diasporaLocations = await prisma.diasporaLocation.findMany()
    * ```
    */
  get diasporaLocation(): Prisma.DiasporaLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    MartiniqueCity: 'MartiniqueCity',
    DiasporaLocation: 'DiasporaLocation',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "martiniqueCity" | "diasporaLocation" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      MartiniqueCity: {
        payload: Prisma.$MartiniqueCityPayload<ExtArgs>
        fields: Prisma.MartiniqueCityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MartiniqueCityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MartiniqueCityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>
          }
          findFirst: {
            args: Prisma.MartiniqueCityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MartiniqueCityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>
          }
          findMany: {
            args: Prisma.MartiniqueCityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>[]
          }
          create: {
            args: Prisma.MartiniqueCityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>
          }
          createMany: {
            args: Prisma.MartiniqueCityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MartiniqueCityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>[]
          }
          delete: {
            args: Prisma.MartiniqueCityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>
          }
          update: {
            args: Prisma.MartiniqueCityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>
          }
          deleteMany: {
            args: Prisma.MartiniqueCityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MartiniqueCityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MartiniqueCityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>[]
          }
          upsert: {
            args: Prisma.MartiniqueCityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MartiniqueCityPayload>
          }
          aggregate: {
            args: Prisma.MartiniqueCityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMartiniqueCity>
          }
          groupBy: {
            args: Prisma.MartiniqueCityGroupByArgs<ExtArgs>
            result: $Utils.Optional<MartiniqueCityGroupByOutputType>[]
          }
          count: {
            args: Prisma.MartiniqueCityCountArgs<ExtArgs>
            result: $Utils.Optional<MartiniqueCityCountAggregateOutputType> | number
          }
        }
      }
      DiasporaLocation: {
        payload: Prisma.$DiasporaLocationPayload<ExtArgs>
        fields: Prisma.DiasporaLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiasporaLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiasporaLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>
          }
          findFirst: {
            args: Prisma.DiasporaLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiasporaLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>
          }
          findMany: {
            args: Prisma.DiasporaLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>[]
          }
          create: {
            args: Prisma.DiasporaLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>
          }
          createMany: {
            args: Prisma.DiasporaLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiasporaLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>[]
          }
          delete: {
            args: Prisma.DiasporaLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>
          }
          update: {
            args: Prisma.DiasporaLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>
          }
          deleteMany: {
            args: Prisma.DiasporaLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiasporaLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiasporaLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>[]
          }
          upsert: {
            args: Prisma.DiasporaLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiasporaLocationPayload>
          }
          aggregate: {
            args: Prisma.DiasporaLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiasporaLocation>
          }
          groupBy: {
            args: Prisma.DiasporaLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiasporaLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiasporaLocationCountArgs<ExtArgs>
            result: $Utils.Optional<DiasporaLocationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    martiniqueCity?: MartiniqueCityOmit
    diasporaLocation?: DiasporaLocationOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MartiniqueCityCountOutputType
   */

  export type MartiniqueCityCountOutputType = {
    usersFromOrigin: number
    usersCurrent: number
  }

  export type MartiniqueCityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersFromOrigin?: boolean | MartiniqueCityCountOutputTypeCountUsersFromOriginArgs
    usersCurrent?: boolean | MartiniqueCityCountOutputTypeCountUsersCurrentArgs
  }

  // Custom InputTypes
  /**
   * MartiniqueCityCountOutputType without action
   */
  export type MartiniqueCityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCityCountOutputType
     */
    select?: MartiniqueCityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MartiniqueCityCountOutputType without action
   */
  export type MartiniqueCityCountOutputTypeCountUsersFromOriginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * MartiniqueCityCountOutputType without action
   */
  export type MartiniqueCityCountOutputTypeCountUsersCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type DiasporaLocationCountOutputType
   */

  export type DiasporaLocationCountOutputType = {
    users: number
  }

  export type DiasporaLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DiasporaLocationCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DiasporaLocationCountOutputType without action
   */
  export type DiasporaLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocationCountOutputType
     */
    select?: DiasporaLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiasporaLocationCountOutputType without action
   */
  export type DiasporaLocationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model MartiniqueCity
   */

  export type AggregateMartiniqueCity = {
    _count: MartiniqueCityCountAggregateOutputType | null
    _avg: MartiniqueCityAvgAggregateOutputType | null
    _sum: MartiniqueCitySumAggregateOutputType | null
    _min: MartiniqueCityMinAggregateOutputType | null
    _max: MartiniqueCityMaxAggregateOutputType | null
  }

  export type MartiniqueCityAvgAggregateOutputType = {
    population: number | null
  }

  export type MartiniqueCitySumAggregateOutputType = {
    population: number | null
  }

  export type MartiniqueCityMinAggregateOutputType = {
    id: string | null
    name: string | null
    postalCode: string | null
    agglomeration: $Enums.CityAgglomeration | null
    population: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MartiniqueCityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    postalCode: string | null
    agglomeration: $Enums.CityAgglomeration | null
    population: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MartiniqueCityCountAggregateOutputType = {
    id: number
    name: number
    postalCode: number
    agglomeration: number
    population: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MartiniqueCityAvgAggregateInputType = {
    population?: true
  }

  export type MartiniqueCitySumAggregateInputType = {
    population?: true
  }

  export type MartiniqueCityMinAggregateInputType = {
    id?: true
    name?: true
    postalCode?: true
    agglomeration?: true
    population?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MartiniqueCityMaxAggregateInputType = {
    id?: true
    name?: true
    postalCode?: true
    agglomeration?: true
    population?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MartiniqueCityCountAggregateInputType = {
    id?: true
    name?: true
    postalCode?: true
    agglomeration?: true
    population?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MartiniqueCityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MartiniqueCity to aggregate.
     */
    where?: MartiniqueCityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MartiniqueCities to fetch.
     */
    orderBy?: MartiniqueCityOrderByWithRelationInput | MartiniqueCityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MartiniqueCityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MartiniqueCities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MartiniqueCities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MartiniqueCities
    **/
    _count?: true | MartiniqueCityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MartiniqueCityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MartiniqueCitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MartiniqueCityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MartiniqueCityMaxAggregateInputType
  }

  export type GetMartiniqueCityAggregateType<T extends MartiniqueCityAggregateArgs> = {
        [P in keyof T & keyof AggregateMartiniqueCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMartiniqueCity[P]>
      : GetScalarType<T[P], AggregateMartiniqueCity[P]>
  }




  export type MartiniqueCityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MartiniqueCityWhereInput
    orderBy?: MartiniqueCityOrderByWithAggregationInput | MartiniqueCityOrderByWithAggregationInput[]
    by: MartiniqueCityScalarFieldEnum[] | MartiniqueCityScalarFieldEnum
    having?: MartiniqueCityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MartiniqueCityCountAggregateInputType | true
    _avg?: MartiniqueCityAvgAggregateInputType
    _sum?: MartiniqueCitySumAggregateInputType
    _min?: MartiniqueCityMinAggregateInputType
    _max?: MartiniqueCityMaxAggregateInputType
  }

  export type MartiniqueCityGroupByOutputType = {
    id: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt: Date
    updatedAt: Date
    _count: MartiniqueCityCountAggregateOutputType | null
    _avg: MartiniqueCityAvgAggregateOutputType | null
    _sum: MartiniqueCitySumAggregateOutputType | null
    _min: MartiniqueCityMinAggregateOutputType | null
    _max: MartiniqueCityMaxAggregateOutputType | null
  }

  type GetMartiniqueCityGroupByPayload<T extends MartiniqueCityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MartiniqueCityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MartiniqueCityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MartiniqueCityGroupByOutputType[P]>
            : GetScalarType<T[P], MartiniqueCityGroupByOutputType[P]>
        }
      >
    >


  export type MartiniqueCitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    postalCode?: boolean
    agglomeration?: boolean
    population?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usersFromOrigin?: boolean | MartiniqueCity$usersFromOriginArgs<ExtArgs>
    usersCurrent?: boolean | MartiniqueCity$usersCurrentArgs<ExtArgs>
    _count?: boolean | MartiniqueCityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["martiniqueCity"]>

  export type MartiniqueCitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    postalCode?: boolean
    agglomeration?: boolean
    population?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["martiniqueCity"]>

  export type MartiniqueCitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    postalCode?: boolean
    agglomeration?: boolean
    population?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["martiniqueCity"]>

  export type MartiniqueCitySelectScalar = {
    id?: boolean
    name?: boolean
    postalCode?: boolean
    agglomeration?: boolean
    population?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MartiniqueCityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "postalCode" | "agglomeration" | "population" | "createdAt" | "updatedAt", ExtArgs["result"]["martiniqueCity"]>
  export type MartiniqueCityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersFromOrigin?: boolean | MartiniqueCity$usersFromOriginArgs<ExtArgs>
    usersCurrent?: boolean | MartiniqueCity$usersCurrentArgs<ExtArgs>
    _count?: boolean | MartiniqueCityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MartiniqueCityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MartiniqueCityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MartiniqueCityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MartiniqueCity"
    objects: {
      usersFromOrigin: Prisma.$UserPayload<ExtArgs>[]
      usersCurrent: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      postalCode: string
      agglomeration: $Enums.CityAgglomeration
      population: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["martiniqueCity"]>
    composites: {}
  }

  type MartiniqueCityGetPayload<S extends boolean | null | undefined | MartiniqueCityDefaultArgs> = $Result.GetResult<Prisma.$MartiniqueCityPayload, S>

  type MartiniqueCityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MartiniqueCityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MartiniqueCityCountAggregateInputType | true
    }

  export interface MartiniqueCityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MartiniqueCity'], meta: { name: 'MartiniqueCity' } }
    /**
     * Find zero or one MartiniqueCity that matches the filter.
     * @param {MartiniqueCityFindUniqueArgs} args - Arguments to find a MartiniqueCity
     * @example
     * // Get one MartiniqueCity
     * const martiniqueCity = await prisma.martiniqueCity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MartiniqueCityFindUniqueArgs>(args: SelectSubset<T, MartiniqueCityFindUniqueArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MartiniqueCity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MartiniqueCityFindUniqueOrThrowArgs} args - Arguments to find a MartiniqueCity
     * @example
     * // Get one MartiniqueCity
     * const martiniqueCity = await prisma.martiniqueCity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MartiniqueCityFindUniqueOrThrowArgs>(args: SelectSubset<T, MartiniqueCityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MartiniqueCity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityFindFirstArgs} args - Arguments to find a MartiniqueCity
     * @example
     * // Get one MartiniqueCity
     * const martiniqueCity = await prisma.martiniqueCity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MartiniqueCityFindFirstArgs>(args?: SelectSubset<T, MartiniqueCityFindFirstArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MartiniqueCity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityFindFirstOrThrowArgs} args - Arguments to find a MartiniqueCity
     * @example
     * // Get one MartiniqueCity
     * const martiniqueCity = await prisma.martiniqueCity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MartiniqueCityFindFirstOrThrowArgs>(args?: SelectSubset<T, MartiniqueCityFindFirstOrThrowArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MartiniqueCities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MartiniqueCities
     * const martiniqueCities = await prisma.martiniqueCity.findMany()
     * 
     * // Get first 10 MartiniqueCities
     * const martiniqueCities = await prisma.martiniqueCity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const martiniqueCityWithIdOnly = await prisma.martiniqueCity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MartiniqueCityFindManyArgs>(args?: SelectSubset<T, MartiniqueCityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MartiniqueCity.
     * @param {MartiniqueCityCreateArgs} args - Arguments to create a MartiniqueCity.
     * @example
     * // Create one MartiniqueCity
     * const MartiniqueCity = await prisma.martiniqueCity.create({
     *   data: {
     *     // ... data to create a MartiniqueCity
     *   }
     * })
     * 
     */
    create<T extends MartiniqueCityCreateArgs>(args: SelectSubset<T, MartiniqueCityCreateArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MartiniqueCities.
     * @param {MartiniqueCityCreateManyArgs} args - Arguments to create many MartiniqueCities.
     * @example
     * // Create many MartiniqueCities
     * const martiniqueCity = await prisma.martiniqueCity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MartiniqueCityCreateManyArgs>(args?: SelectSubset<T, MartiniqueCityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MartiniqueCities and returns the data saved in the database.
     * @param {MartiniqueCityCreateManyAndReturnArgs} args - Arguments to create many MartiniqueCities.
     * @example
     * // Create many MartiniqueCities
     * const martiniqueCity = await prisma.martiniqueCity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MartiniqueCities and only return the `id`
     * const martiniqueCityWithIdOnly = await prisma.martiniqueCity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MartiniqueCityCreateManyAndReturnArgs>(args?: SelectSubset<T, MartiniqueCityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MartiniqueCity.
     * @param {MartiniqueCityDeleteArgs} args - Arguments to delete one MartiniqueCity.
     * @example
     * // Delete one MartiniqueCity
     * const MartiniqueCity = await prisma.martiniqueCity.delete({
     *   where: {
     *     // ... filter to delete one MartiniqueCity
     *   }
     * })
     * 
     */
    delete<T extends MartiniqueCityDeleteArgs>(args: SelectSubset<T, MartiniqueCityDeleteArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MartiniqueCity.
     * @param {MartiniqueCityUpdateArgs} args - Arguments to update one MartiniqueCity.
     * @example
     * // Update one MartiniqueCity
     * const martiniqueCity = await prisma.martiniqueCity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MartiniqueCityUpdateArgs>(args: SelectSubset<T, MartiniqueCityUpdateArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MartiniqueCities.
     * @param {MartiniqueCityDeleteManyArgs} args - Arguments to filter MartiniqueCities to delete.
     * @example
     * // Delete a few MartiniqueCities
     * const { count } = await prisma.martiniqueCity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MartiniqueCityDeleteManyArgs>(args?: SelectSubset<T, MartiniqueCityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MartiniqueCities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MartiniqueCities
     * const martiniqueCity = await prisma.martiniqueCity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MartiniqueCityUpdateManyArgs>(args: SelectSubset<T, MartiniqueCityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MartiniqueCities and returns the data updated in the database.
     * @param {MartiniqueCityUpdateManyAndReturnArgs} args - Arguments to update many MartiniqueCities.
     * @example
     * // Update many MartiniqueCities
     * const martiniqueCity = await prisma.martiniqueCity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MartiniqueCities and only return the `id`
     * const martiniqueCityWithIdOnly = await prisma.martiniqueCity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MartiniqueCityUpdateManyAndReturnArgs>(args: SelectSubset<T, MartiniqueCityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MartiniqueCity.
     * @param {MartiniqueCityUpsertArgs} args - Arguments to update or create a MartiniqueCity.
     * @example
     * // Update or create a MartiniqueCity
     * const martiniqueCity = await prisma.martiniqueCity.upsert({
     *   create: {
     *     // ... data to create a MartiniqueCity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MartiniqueCity we want to update
     *   }
     * })
     */
    upsert<T extends MartiniqueCityUpsertArgs>(args: SelectSubset<T, MartiniqueCityUpsertArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MartiniqueCities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityCountArgs} args - Arguments to filter MartiniqueCities to count.
     * @example
     * // Count the number of MartiniqueCities
     * const count = await prisma.martiniqueCity.count({
     *   where: {
     *     // ... the filter for the MartiniqueCities we want to count
     *   }
     * })
    **/
    count<T extends MartiniqueCityCountArgs>(
      args?: Subset<T, MartiniqueCityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MartiniqueCityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MartiniqueCity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MartiniqueCityAggregateArgs>(args: Subset<T, MartiniqueCityAggregateArgs>): Prisma.PrismaPromise<GetMartiniqueCityAggregateType<T>>

    /**
     * Group by MartiniqueCity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MartiniqueCityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MartiniqueCityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MartiniqueCityGroupByArgs['orderBy'] }
        : { orderBy?: MartiniqueCityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MartiniqueCityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMartiniqueCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MartiniqueCity model
   */
  readonly fields: MartiniqueCityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MartiniqueCity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MartiniqueCityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usersFromOrigin<T extends MartiniqueCity$usersFromOriginArgs<ExtArgs> = {}>(args?: Subset<T, MartiniqueCity$usersFromOriginArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usersCurrent<T extends MartiniqueCity$usersCurrentArgs<ExtArgs> = {}>(args?: Subset<T, MartiniqueCity$usersCurrentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MartiniqueCity model
   */
  interface MartiniqueCityFieldRefs {
    readonly id: FieldRef<"MartiniqueCity", 'String'>
    readonly name: FieldRef<"MartiniqueCity", 'String'>
    readonly postalCode: FieldRef<"MartiniqueCity", 'String'>
    readonly agglomeration: FieldRef<"MartiniqueCity", 'CityAgglomeration'>
    readonly population: FieldRef<"MartiniqueCity", 'Int'>
    readonly createdAt: FieldRef<"MartiniqueCity", 'DateTime'>
    readonly updatedAt: FieldRef<"MartiniqueCity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MartiniqueCity findUnique
   */
  export type MartiniqueCityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * Filter, which MartiniqueCity to fetch.
     */
    where: MartiniqueCityWhereUniqueInput
  }

  /**
   * MartiniqueCity findUniqueOrThrow
   */
  export type MartiniqueCityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * Filter, which MartiniqueCity to fetch.
     */
    where: MartiniqueCityWhereUniqueInput
  }

  /**
   * MartiniqueCity findFirst
   */
  export type MartiniqueCityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * Filter, which MartiniqueCity to fetch.
     */
    where?: MartiniqueCityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MartiniqueCities to fetch.
     */
    orderBy?: MartiniqueCityOrderByWithRelationInput | MartiniqueCityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MartiniqueCities.
     */
    cursor?: MartiniqueCityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MartiniqueCities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MartiniqueCities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MartiniqueCities.
     */
    distinct?: MartiniqueCityScalarFieldEnum | MartiniqueCityScalarFieldEnum[]
  }

  /**
   * MartiniqueCity findFirstOrThrow
   */
  export type MartiniqueCityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * Filter, which MartiniqueCity to fetch.
     */
    where?: MartiniqueCityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MartiniqueCities to fetch.
     */
    orderBy?: MartiniqueCityOrderByWithRelationInput | MartiniqueCityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MartiniqueCities.
     */
    cursor?: MartiniqueCityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MartiniqueCities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MartiniqueCities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MartiniqueCities.
     */
    distinct?: MartiniqueCityScalarFieldEnum | MartiniqueCityScalarFieldEnum[]
  }

  /**
   * MartiniqueCity findMany
   */
  export type MartiniqueCityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * Filter, which MartiniqueCities to fetch.
     */
    where?: MartiniqueCityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MartiniqueCities to fetch.
     */
    orderBy?: MartiniqueCityOrderByWithRelationInput | MartiniqueCityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MartiniqueCities.
     */
    cursor?: MartiniqueCityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MartiniqueCities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MartiniqueCities.
     */
    skip?: number
    distinct?: MartiniqueCityScalarFieldEnum | MartiniqueCityScalarFieldEnum[]
  }

  /**
   * MartiniqueCity create
   */
  export type MartiniqueCityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * The data needed to create a MartiniqueCity.
     */
    data: XOR<MartiniqueCityCreateInput, MartiniqueCityUncheckedCreateInput>
  }

  /**
   * MartiniqueCity createMany
   */
  export type MartiniqueCityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MartiniqueCities.
     */
    data: MartiniqueCityCreateManyInput | MartiniqueCityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MartiniqueCity createManyAndReturn
   */
  export type MartiniqueCityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * The data used to create many MartiniqueCities.
     */
    data: MartiniqueCityCreateManyInput | MartiniqueCityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MartiniqueCity update
   */
  export type MartiniqueCityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * The data needed to update a MartiniqueCity.
     */
    data: XOR<MartiniqueCityUpdateInput, MartiniqueCityUncheckedUpdateInput>
    /**
     * Choose, which MartiniqueCity to update.
     */
    where: MartiniqueCityWhereUniqueInput
  }

  /**
   * MartiniqueCity updateMany
   */
  export type MartiniqueCityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MartiniqueCities.
     */
    data: XOR<MartiniqueCityUpdateManyMutationInput, MartiniqueCityUncheckedUpdateManyInput>
    /**
     * Filter which MartiniqueCities to update
     */
    where?: MartiniqueCityWhereInput
    /**
     * Limit how many MartiniqueCities to update.
     */
    limit?: number
  }

  /**
   * MartiniqueCity updateManyAndReturn
   */
  export type MartiniqueCityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * The data used to update MartiniqueCities.
     */
    data: XOR<MartiniqueCityUpdateManyMutationInput, MartiniqueCityUncheckedUpdateManyInput>
    /**
     * Filter which MartiniqueCities to update
     */
    where?: MartiniqueCityWhereInput
    /**
     * Limit how many MartiniqueCities to update.
     */
    limit?: number
  }

  /**
   * MartiniqueCity upsert
   */
  export type MartiniqueCityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * The filter to search for the MartiniqueCity to update in case it exists.
     */
    where: MartiniqueCityWhereUniqueInput
    /**
     * In case the MartiniqueCity found by the `where` argument doesn't exist, create a new MartiniqueCity with this data.
     */
    create: XOR<MartiniqueCityCreateInput, MartiniqueCityUncheckedCreateInput>
    /**
     * In case the MartiniqueCity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MartiniqueCityUpdateInput, MartiniqueCityUncheckedUpdateInput>
  }

  /**
   * MartiniqueCity delete
   */
  export type MartiniqueCityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
    /**
     * Filter which MartiniqueCity to delete.
     */
    where: MartiniqueCityWhereUniqueInput
  }

  /**
   * MartiniqueCity deleteMany
   */
  export type MartiniqueCityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MartiniqueCities to delete
     */
    where?: MartiniqueCityWhereInput
    /**
     * Limit how many MartiniqueCities to delete.
     */
    limit?: number
  }

  /**
   * MartiniqueCity.usersFromOrigin
   */
  export type MartiniqueCity$usersFromOriginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * MartiniqueCity.usersCurrent
   */
  export type MartiniqueCity$usersCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * MartiniqueCity without action
   */
  export type MartiniqueCityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MartiniqueCity
     */
    select?: MartiniqueCitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MartiniqueCity
     */
    omit?: MartiniqueCityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MartiniqueCityInclude<ExtArgs> | null
  }


  /**
   * Model DiasporaLocation
   */

  export type AggregateDiasporaLocation = {
    _count: DiasporaLocationCountAggregateOutputType | null
    _min: DiasporaLocationMinAggregateOutputType | null
    _max: DiasporaLocationMaxAggregateOutputType | null
  }

  export type DiasporaLocationMinAggregateOutputType = {
    id: string | null
    country: string | null
    countryCode: string | null
    region: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiasporaLocationMaxAggregateOutputType = {
    id: string | null
    country: string | null
    countryCode: string | null
    region: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiasporaLocationCountAggregateOutputType = {
    id: number
    country: number
    countryCode: number
    region: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiasporaLocationMinAggregateInputType = {
    id?: true
    country?: true
    countryCode?: true
    region?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiasporaLocationMaxAggregateInputType = {
    id?: true
    country?: true
    countryCode?: true
    region?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiasporaLocationCountAggregateInputType = {
    id?: true
    country?: true
    countryCode?: true
    region?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiasporaLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiasporaLocation to aggregate.
     */
    where?: DiasporaLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiasporaLocations to fetch.
     */
    orderBy?: DiasporaLocationOrderByWithRelationInput | DiasporaLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiasporaLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiasporaLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiasporaLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiasporaLocations
    **/
    _count?: true | DiasporaLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiasporaLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiasporaLocationMaxAggregateInputType
  }

  export type GetDiasporaLocationAggregateType<T extends DiasporaLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateDiasporaLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiasporaLocation[P]>
      : GetScalarType<T[P], AggregateDiasporaLocation[P]>
  }




  export type DiasporaLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiasporaLocationWhereInput
    orderBy?: DiasporaLocationOrderByWithAggregationInput | DiasporaLocationOrderByWithAggregationInput[]
    by: DiasporaLocationScalarFieldEnum[] | DiasporaLocationScalarFieldEnum
    having?: DiasporaLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiasporaLocationCountAggregateInputType | true
    _min?: DiasporaLocationMinAggregateInputType
    _max?: DiasporaLocationMaxAggregateInputType
  }

  export type DiasporaLocationGroupByOutputType = {
    id: string
    country: string
    countryCode: string
    region: string | null
    createdAt: Date
    updatedAt: Date
    _count: DiasporaLocationCountAggregateOutputType | null
    _min: DiasporaLocationMinAggregateOutputType | null
    _max: DiasporaLocationMaxAggregateOutputType | null
  }

  type GetDiasporaLocationGroupByPayload<T extends DiasporaLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiasporaLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiasporaLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiasporaLocationGroupByOutputType[P]>
            : GetScalarType<T[P], DiasporaLocationGroupByOutputType[P]>
        }
      >
    >


  export type DiasporaLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    countryCode?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | DiasporaLocation$usersArgs<ExtArgs>
    _count?: boolean | DiasporaLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diasporaLocation"]>

  export type DiasporaLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    countryCode?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["diasporaLocation"]>

  export type DiasporaLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    countryCode?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["diasporaLocation"]>

  export type DiasporaLocationSelectScalar = {
    id?: boolean
    country?: boolean
    countryCode?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DiasporaLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "country" | "countryCode" | "region" | "createdAt" | "updatedAt", ExtArgs["result"]["diasporaLocation"]>
  export type DiasporaLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DiasporaLocation$usersArgs<ExtArgs>
    _count?: boolean | DiasporaLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DiasporaLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DiasporaLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DiasporaLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiasporaLocation"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      country: string
      countryCode: string
      region: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["diasporaLocation"]>
    composites: {}
  }

  type DiasporaLocationGetPayload<S extends boolean | null | undefined | DiasporaLocationDefaultArgs> = $Result.GetResult<Prisma.$DiasporaLocationPayload, S>

  type DiasporaLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiasporaLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiasporaLocationCountAggregateInputType | true
    }

  export interface DiasporaLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiasporaLocation'], meta: { name: 'DiasporaLocation' } }
    /**
     * Find zero or one DiasporaLocation that matches the filter.
     * @param {DiasporaLocationFindUniqueArgs} args - Arguments to find a DiasporaLocation
     * @example
     * // Get one DiasporaLocation
     * const diasporaLocation = await prisma.diasporaLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiasporaLocationFindUniqueArgs>(args: SelectSubset<T, DiasporaLocationFindUniqueArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiasporaLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiasporaLocationFindUniqueOrThrowArgs} args - Arguments to find a DiasporaLocation
     * @example
     * // Get one DiasporaLocation
     * const diasporaLocation = await prisma.diasporaLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiasporaLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, DiasporaLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiasporaLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationFindFirstArgs} args - Arguments to find a DiasporaLocation
     * @example
     * // Get one DiasporaLocation
     * const diasporaLocation = await prisma.diasporaLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiasporaLocationFindFirstArgs>(args?: SelectSubset<T, DiasporaLocationFindFirstArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiasporaLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationFindFirstOrThrowArgs} args - Arguments to find a DiasporaLocation
     * @example
     * // Get one DiasporaLocation
     * const diasporaLocation = await prisma.diasporaLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiasporaLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, DiasporaLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiasporaLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiasporaLocations
     * const diasporaLocations = await prisma.diasporaLocation.findMany()
     * 
     * // Get first 10 DiasporaLocations
     * const diasporaLocations = await prisma.diasporaLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diasporaLocationWithIdOnly = await prisma.diasporaLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiasporaLocationFindManyArgs>(args?: SelectSubset<T, DiasporaLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiasporaLocation.
     * @param {DiasporaLocationCreateArgs} args - Arguments to create a DiasporaLocation.
     * @example
     * // Create one DiasporaLocation
     * const DiasporaLocation = await prisma.diasporaLocation.create({
     *   data: {
     *     // ... data to create a DiasporaLocation
     *   }
     * })
     * 
     */
    create<T extends DiasporaLocationCreateArgs>(args: SelectSubset<T, DiasporaLocationCreateArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiasporaLocations.
     * @param {DiasporaLocationCreateManyArgs} args - Arguments to create many DiasporaLocations.
     * @example
     * // Create many DiasporaLocations
     * const diasporaLocation = await prisma.diasporaLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiasporaLocationCreateManyArgs>(args?: SelectSubset<T, DiasporaLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiasporaLocations and returns the data saved in the database.
     * @param {DiasporaLocationCreateManyAndReturnArgs} args - Arguments to create many DiasporaLocations.
     * @example
     * // Create many DiasporaLocations
     * const diasporaLocation = await prisma.diasporaLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiasporaLocations and only return the `id`
     * const diasporaLocationWithIdOnly = await prisma.diasporaLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiasporaLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, DiasporaLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DiasporaLocation.
     * @param {DiasporaLocationDeleteArgs} args - Arguments to delete one DiasporaLocation.
     * @example
     * // Delete one DiasporaLocation
     * const DiasporaLocation = await prisma.diasporaLocation.delete({
     *   where: {
     *     // ... filter to delete one DiasporaLocation
     *   }
     * })
     * 
     */
    delete<T extends DiasporaLocationDeleteArgs>(args: SelectSubset<T, DiasporaLocationDeleteArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiasporaLocation.
     * @param {DiasporaLocationUpdateArgs} args - Arguments to update one DiasporaLocation.
     * @example
     * // Update one DiasporaLocation
     * const diasporaLocation = await prisma.diasporaLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiasporaLocationUpdateArgs>(args: SelectSubset<T, DiasporaLocationUpdateArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiasporaLocations.
     * @param {DiasporaLocationDeleteManyArgs} args - Arguments to filter DiasporaLocations to delete.
     * @example
     * // Delete a few DiasporaLocations
     * const { count } = await prisma.diasporaLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiasporaLocationDeleteManyArgs>(args?: SelectSubset<T, DiasporaLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiasporaLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiasporaLocations
     * const diasporaLocation = await prisma.diasporaLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiasporaLocationUpdateManyArgs>(args: SelectSubset<T, DiasporaLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiasporaLocations and returns the data updated in the database.
     * @param {DiasporaLocationUpdateManyAndReturnArgs} args - Arguments to update many DiasporaLocations.
     * @example
     * // Update many DiasporaLocations
     * const diasporaLocation = await prisma.diasporaLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DiasporaLocations and only return the `id`
     * const diasporaLocationWithIdOnly = await prisma.diasporaLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiasporaLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, DiasporaLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DiasporaLocation.
     * @param {DiasporaLocationUpsertArgs} args - Arguments to update or create a DiasporaLocation.
     * @example
     * // Update or create a DiasporaLocation
     * const diasporaLocation = await prisma.diasporaLocation.upsert({
     *   create: {
     *     // ... data to create a DiasporaLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiasporaLocation we want to update
     *   }
     * })
     */
    upsert<T extends DiasporaLocationUpsertArgs>(args: SelectSubset<T, DiasporaLocationUpsertArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiasporaLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationCountArgs} args - Arguments to filter DiasporaLocations to count.
     * @example
     * // Count the number of DiasporaLocations
     * const count = await prisma.diasporaLocation.count({
     *   where: {
     *     // ... the filter for the DiasporaLocations we want to count
     *   }
     * })
    **/
    count<T extends DiasporaLocationCountArgs>(
      args?: Subset<T, DiasporaLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiasporaLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiasporaLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiasporaLocationAggregateArgs>(args: Subset<T, DiasporaLocationAggregateArgs>): Prisma.PrismaPromise<GetDiasporaLocationAggregateType<T>>

    /**
     * Group by DiasporaLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiasporaLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiasporaLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiasporaLocationGroupByArgs['orderBy'] }
        : { orderBy?: DiasporaLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiasporaLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiasporaLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiasporaLocation model
   */
  readonly fields: DiasporaLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiasporaLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiasporaLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends DiasporaLocation$usersArgs<ExtArgs> = {}>(args?: Subset<T, DiasporaLocation$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiasporaLocation model
   */
  interface DiasporaLocationFieldRefs {
    readonly id: FieldRef<"DiasporaLocation", 'String'>
    readonly country: FieldRef<"DiasporaLocation", 'String'>
    readonly countryCode: FieldRef<"DiasporaLocation", 'String'>
    readonly region: FieldRef<"DiasporaLocation", 'String'>
    readonly createdAt: FieldRef<"DiasporaLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"DiasporaLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DiasporaLocation findUnique
   */
  export type DiasporaLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * Filter, which DiasporaLocation to fetch.
     */
    where: DiasporaLocationWhereUniqueInput
  }

  /**
   * DiasporaLocation findUniqueOrThrow
   */
  export type DiasporaLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * Filter, which DiasporaLocation to fetch.
     */
    where: DiasporaLocationWhereUniqueInput
  }

  /**
   * DiasporaLocation findFirst
   */
  export type DiasporaLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * Filter, which DiasporaLocation to fetch.
     */
    where?: DiasporaLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiasporaLocations to fetch.
     */
    orderBy?: DiasporaLocationOrderByWithRelationInput | DiasporaLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiasporaLocations.
     */
    cursor?: DiasporaLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiasporaLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiasporaLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiasporaLocations.
     */
    distinct?: DiasporaLocationScalarFieldEnum | DiasporaLocationScalarFieldEnum[]
  }

  /**
   * DiasporaLocation findFirstOrThrow
   */
  export type DiasporaLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * Filter, which DiasporaLocation to fetch.
     */
    where?: DiasporaLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiasporaLocations to fetch.
     */
    orderBy?: DiasporaLocationOrderByWithRelationInput | DiasporaLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiasporaLocations.
     */
    cursor?: DiasporaLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiasporaLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiasporaLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiasporaLocations.
     */
    distinct?: DiasporaLocationScalarFieldEnum | DiasporaLocationScalarFieldEnum[]
  }

  /**
   * DiasporaLocation findMany
   */
  export type DiasporaLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * Filter, which DiasporaLocations to fetch.
     */
    where?: DiasporaLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiasporaLocations to fetch.
     */
    orderBy?: DiasporaLocationOrderByWithRelationInput | DiasporaLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiasporaLocations.
     */
    cursor?: DiasporaLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiasporaLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiasporaLocations.
     */
    skip?: number
    distinct?: DiasporaLocationScalarFieldEnum | DiasporaLocationScalarFieldEnum[]
  }

  /**
   * DiasporaLocation create
   */
  export type DiasporaLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a DiasporaLocation.
     */
    data: XOR<DiasporaLocationCreateInput, DiasporaLocationUncheckedCreateInput>
  }

  /**
   * DiasporaLocation createMany
   */
  export type DiasporaLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiasporaLocations.
     */
    data: DiasporaLocationCreateManyInput | DiasporaLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiasporaLocation createManyAndReturn
   */
  export type DiasporaLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * The data used to create many DiasporaLocations.
     */
    data: DiasporaLocationCreateManyInput | DiasporaLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiasporaLocation update
   */
  export type DiasporaLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a DiasporaLocation.
     */
    data: XOR<DiasporaLocationUpdateInput, DiasporaLocationUncheckedUpdateInput>
    /**
     * Choose, which DiasporaLocation to update.
     */
    where: DiasporaLocationWhereUniqueInput
  }

  /**
   * DiasporaLocation updateMany
   */
  export type DiasporaLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiasporaLocations.
     */
    data: XOR<DiasporaLocationUpdateManyMutationInput, DiasporaLocationUncheckedUpdateManyInput>
    /**
     * Filter which DiasporaLocations to update
     */
    where?: DiasporaLocationWhereInput
    /**
     * Limit how many DiasporaLocations to update.
     */
    limit?: number
  }

  /**
   * DiasporaLocation updateManyAndReturn
   */
  export type DiasporaLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * The data used to update DiasporaLocations.
     */
    data: XOR<DiasporaLocationUpdateManyMutationInput, DiasporaLocationUncheckedUpdateManyInput>
    /**
     * Filter which DiasporaLocations to update
     */
    where?: DiasporaLocationWhereInput
    /**
     * Limit how many DiasporaLocations to update.
     */
    limit?: number
  }

  /**
   * DiasporaLocation upsert
   */
  export type DiasporaLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the DiasporaLocation to update in case it exists.
     */
    where: DiasporaLocationWhereUniqueInput
    /**
     * In case the DiasporaLocation found by the `where` argument doesn't exist, create a new DiasporaLocation with this data.
     */
    create: XOR<DiasporaLocationCreateInput, DiasporaLocationUncheckedCreateInput>
    /**
     * In case the DiasporaLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiasporaLocationUpdateInput, DiasporaLocationUncheckedUpdateInput>
  }

  /**
   * DiasporaLocation delete
   */
  export type DiasporaLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    /**
     * Filter which DiasporaLocation to delete.
     */
    where: DiasporaLocationWhereUniqueInput
  }

  /**
   * DiasporaLocation deleteMany
   */
  export type DiasporaLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiasporaLocations to delete
     */
    where?: DiasporaLocationWhereInput
    /**
     * Limit how many DiasporaLocations to delete.
     */
    limit?: number
  }

  /**
   * DiasporaLocation.users
   */
  export type DiasporaLocation$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * DiasporaLocation without action
   */
  export type DiasporaLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    nickname: string | null
    isDiaspora: boolean | null
    cityOfOriginId: string | null
    currentCityId: string | null
    diasporaLocationId: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    nickname: string | null
    isDiaspora: boolean | null
    cityOfOriginId: string | null
    currentCityId: string | null
    diasporaLocationId: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    nickname: number
    isDiaspora: number
    cityOfOriginId: number
    currentCityId: number
    diasporaLocationId: number
    role: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    nickname?: true
    isDiaspora?: true
    cityOfOriginId?: true
    currentCityId?: true
    diasporaLocationId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    nickname?: true
    isDiaspora?: true
    cityOfOriginId?: true
    currentCityId?: true
    diasporaLocationId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    nickname?: true
    isDiaspora?: true
    cityOfOriginId?: true
    currentCityId?: true
    diasporaLocationId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname: string | null
    isDiaspora: boolean
    cityOfOriginId: string
    currentCityId: string
    diasporaLocationId: string | null
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    isDiaspora?: boolean
    cityOfOriginId?: boolean
    currentCityId?: boolean
    diasporaLocationId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    cityOfOrigin?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    currentCity?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    diasporaLocation?: boolean | User$diasporaLocationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    isDiaspora?: boolean
    cityOfOriginId?: boolean
    currentCityId?: boolean
    diasporaLocationId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    cityOfOrigin?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    currentCity?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    diasporaLocation?: boolean | User$diasporaLocationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    isDiaspora?: boolean
    cityOfOriginId?: boolean
    currentCityId?: boolean
    diasporaLocationId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    cityOfOrigin?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    currentCity?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    diasporaLocation?: boolean | User$diasporaLocationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    nickname?: boolean
    isDiaspora?: boolean
    cityOfOriginId?: boolean
    currentCityId?: boolean
    diasporaLocationId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "nickname" | "isDiaspora" | "cityOfOriginId" | "currentCityId" | "diasporaLocationId" | "role" | "createdAt" | "updatedAt" | "lastLoginAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cityOfOrigin?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    currentCity?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    diasporaLocation?: boolean | User$diasporaLocationArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cityOfOrigin?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    currentCity?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    diasporaLocation?: boolean | User$diasporaLocationArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cityOfOrigin?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    currentCity?: boolean | MartiniqueCityDefaultArgs<ExtArgs>
    diasporaLocation?: boolean | User$diasporaLocationArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      cityOfOrigin: Prisma.$MartiniqueCityPayload<ExtArgs>
      currentCity: Prisma.$MartiniqueCityPayload<ExtArgs>
      diasporaLocation: Prisma.$DiasporaLocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      nickname: string | null
      isDiaspora: boolean
      cityOfOriginId: string
      currentCityId: string
      diasporaLocationId: string | null
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cityOfOrigin<T extends MartiniqueCityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MartiniqueCityDefaultArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currentCity<T extends MartiniqueCityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MartiniqueCityDefaultArgs<ExtArgs>>): Prisma__MartiniqueCityClient<$Result.GetResult<Prisma.$MartiniqueCityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    diasporaLocation<T extends User$diasporaLocationArgs<ExtArgs> = {}>(args?: Subset<T, User$diasporaLocationArgs<ExtArgs>>): Prisma__DiasporaLocationClient<$Result.GetResult<Prisma.$DiasporaLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly isDiaspora: FieldRef<"User", 'Boolean'>
    readonly cityOfOriginId: FieldRef<"User", 'String'>
    readonly currentCityId: FieldRef<"User", 'String'>
    readonly diasporaLocationId: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.diasporaLocation
   */
  export type User$diasporaLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiasporaLocation
     */
    select?: DiasporaLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiasporaLocation
     */
    omit?: DiasporaLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiasporaLocationInclude<ExtArgs> | null
    where?: DiasporaLocationWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MartiniqueCityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    postalCode: 'postalCode',
    agglomeration: 'agglomeration',
    population: 'population',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MartiniqueCityScalarFieldEnum = (typeof MartiniqueCityScalarFieldEnum)[keyof typeof MartiniqueCityScalarFieldEnum]


  export const DiasporaLocationScalarFieldEnum: {
    id: 'id',
    country: 'country',
    countryCode: 'countryCode',
    region: 'region',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiasporaLocationScalarFieldEnum = (typeof DiasporaLocationScalarFieldEnum)[keyof typeof DiasporaLocationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    nickname: 'nickname',
    isDiaspora: 'isDiaspora',
    cityOfOriginId: 'cityOfOriginId',
    currentCityId: 'currentCityId',
    diasporaLocationId: 'diasporaLocationId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'CityAgglomeration'
   */
  export type EnumCityAgglomerationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CityAgglomeration'>
    


  /**
   * Reference to a field of type 'CityAgglomeration[]'
   */
  export type ListEnumCityAgglomerationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CityAgglomeration[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MartiniqueCityWhereInput = {
    AND?: MartiniqueCityWhereInput | MartiniqueCityWhereInput[]
    OR?: MartiniqueCityWhereInput[]
    NOT?: MartiniqueCityWhereInput | MartiniqueCityWhereInput[]
    id?: StringFilter<"MartiniqueCity"> | string
    name?: StringFilter<"MartiniqueCity"> | string
    postalCode?: StringFilter<"MartiniqueCity"> | string
    agglomeration?: EnumCityAgglomerationFilter<"MartiniqueCity"> | $Enums.CityAgglomeration
    population?: IntFilter<"MartiniqueCity"> | number
    createdAt?: DateTimeFilter<"MartiniqueCity"> | Date | string
    updatedAt?: DateTimeFilter<"MartiniqueCity"> | Date | string
    usersFromOrigin?: UserListRelationFilter
    usersCurrent?: UserListRelationFilter
  }

  export type MartiniqueCityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    postalCode?: SortOrder
    agglomeration?: SortOrder
    population?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usersFromOrigin?: UserOrderByRelationAggregateInput
    usersCurrent?: UserOrderByRelationAggregateInput
  }

  export type MartiniqueCityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: MartiniqueCityWhereInput | MartiniqueCityWhereInput[]
    OR?: MartiniqueCityWhereInput[]
    NOT?: MartiniqueCityWhereInput | MartiniqueCityWhereInput[]
    postalCode?: StringFilter<"MartiniqueCity"> | string
    agglomeration?: EnumCityAgglomerationFilter<"MartiniqueCity"> | $Enums.CityAgglomeration
    population?: IntFilter<"MartiniqueCity"> | number
    createdAt?: DateTimeFilter<"MartiniqueCity"> | Date | string
    updatedAt?: DateTimeFilter<"MartiniqueCity"> | Date | string
    usersFromOrigin?: UserListRelationFilter
    usersCurrent?: UserListRelationFilter
  }, "id" | "name">

  export type MartiniqueCityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    postalCode?: SortOrder
    agglomeration?: SortOrder
    population?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MartiniqueCityCountOrderByAggregateInput
    _avg?: MartiniqueCityAvgOrderByAggregateInput
    _max?: MartiniqueCityMaxOrderByAggregateInput
    _min?: MartiniqueCityMinOrderByAggregateInput
    _sum?: MartiniqueCitySumOrderByAggregateInput
  }

  export type MartiniqueCityScalarWhereWithAggregatesInput = {
    AND?: MartiniqueCityScalarWhereWithAggregatesInput | MartiniqueCityScalarWhereWithAggregatesInput[]
    OR?: MartiniqueCityScalarWhereWithAggregatesInput[]
    NOT?: MartiniqueCityScalarWhereWithAggregatesInput | MartiniqueCityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MartiniqueCity"> | string
    name?: StringWithAggregatesFilter<"MartiniqueCity"> | string
    postalCode?: StringWithAggregatesFilter<"MartiniqueCity"> | string
    agglomeration?: EnumCityAgglomerationWithAggregatesFilter<"MartiniqueCity"> | $Enums.CityAgglomeration
    population?: IntWithAggregatesFilter<"MartiniqueCity"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MartiniqueCity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MartiniqueCity"> | Date | string
  }

  export type DiasporaLocationWhereInput = {
    AND?: DiasporaLocationWhereInput | DiasporaLocationWhereInput[]
    OR?: DiasporaLocationWhereInput[]
    NOT?: DiasporaLocationWhereInput | DiasporaLocationWhereInput[]
    id?: StringFilter<"DiasporaLocation"> | string
    country?: StringFilter<"DiasporaLocation"> | string
    countryCode?: StringFilter<"DiasporaLocation"> | string
    region?: StringNullableFilter<"DiasporaLocation"> | string | null
    createdAt?: DateTimeFilter<"DiasporaLocation"> | Date | string
    updatedAt?: DateTimeFilter<"DiasporaLocation"> | Date | string
    users?: UserListRelationFilter
  }

  export type DiasporaLocationOrderByWithRelationInput = {
    id?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    region?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type DiasporaLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    country?: string
    AND?: DiasporaLocationWhereInput | DiasporaLocationWhereInput[]
    OR?: DiasporaLocationWhereInput[]
    NOT?: DiasporaLocationWhereInput | DiasporaLocationWhereInput[]
    countryCode?: StringFilter<"DiasporaLocation"> | string
    region?: StringNullableFilter<"DiasporaLocation"> | string | null
    createdAt?: DateTimeFilter<"DiasporaLocation"> | Date | string
    updatedAt?: DateTimeFilter<"DiasporaLocation"> | Date | string
    users?: UserListRelationFilter
  }, "id" | "country">

  export type DiasporaLocationOrderByWithAggregationInput = {
    id?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    region?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiasporaLocationCountOrderByAggregateInput
    _max?: DiasporaLocationMaxOrderByAggregateInput
    _min?: DiasporaLocationMinOrderByAggregateInput
  }

  export type DiasporaLocationScalarWhereWithAggregatesInput = {
    AND?: DiasporaLocationScalarWhereWithAggregatesInput | DiasporaLocationScalarWhereWithAggregatesInput[]
    OR?: DiasporaLocationScalarWhereWithAggregatesInput[]
    NOT?: DiasporaLocationScalarWhereWithAggregatesInput | DiasporaLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiasporaLocation"> | string
    country?: StringWithAggregatesFilter<"DiasporaLocation"> | string
    countryCode?: StringWithAggregatesFilter<"DiasporaLocation"> | string
    region?: StringNullableWithAggregatesFilter<"DiasporaLocation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DiasporaLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiasporaLocation"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    nickname?: StringNullableFilter<"User"> | string | null
    isDiaspora?: BoolFilter<"User"> | boolean
    cityOfOriginId?: StringFilter<"User"> | string
    currentCityId?: StringFilter<"User"> | string
    diasporaLocationId?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    cityOfOrigin?: XOR<MartiniqueCityScalarRelationFilter, MartiniqueCityWhereInput>
    currentCity?: XOR<MartiniqueCityScalarRelationFilter, MartiniqueCityWhereInput>
    diasporaLocation?: XOR<DiasporaLocationNullableScalarRelationFilter, DiasporaLocationWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrderInput | SortOrder
    isDiaspora?: SortOrder
    cityOfOriginId?: SortOrder
    currentCityId?: SortOrder
    diasporaLocationId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    cityOfOrigin?: MartiniqueCityOrderByWithRelationInput
    currentCity?: MartiniqueCityOrderByWithRelationInput
    diasporaLocation?: DiasporaLocationOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    nickname?: StringNullableFilter<"User"> | string | null
    isDiaspora?: BoolFilter<"User"> | boolean
    cityOfOriginId?: StringFilter<"User"> | string
    currentCityId?: StringFilter<"User"> | string
    diasporaLocationId?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    cityOfOrigin?: XOR<MartiniqueCityScalarRelationFilter, MartiniqueCityWhereInput>
    currentCity?: XOR<MartiniqueCityScalarRelationFilter, MartiniqueCityWhereInput>
    diasporaLocation?: XOR<DiasporaLocationNullableScalarRelationFilter, DiasporaLocationWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrderInput | SortOrder
    isDiaspora?: SortOrder
    cityOfOriginId?: SortOrder
    currentCityId?: SortOrder
    diasporaLocationId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    nickname?: StringNullableWithAggregatesFilter<"User"> | string | null
    isDiaspora?: BoolWithAggregatesFilter<"User"> | boolean
    cityOfOriginId?: StringWithAggregatesFilter<"User"> | string
    currentCityId?: StringWithAggregatesFilter<"User"> | string
    diasporaLocationId?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type MartiniqueCityCreateInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usersFromOrigin?: UserCreateNestedManyWithoutCityOfOriginInput
    usersCurrent?: UserCreateNestedManyWithoutCurrentCityInput
  }

  export type MartiniqueCityUncheckedCreateInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usersFromOrigin?: UserUncheckedCreateNestedManyWithoutCityOfOriginInput
    usersCurrent?: UserUncheckedCreateNestedManyWithoutCurrentCityInput
  }

  export type MartiniqueCityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersFromOrigin?: UserUpdateManyWithoutCityOfOriginNestedInput
    usersCurrent?: UserUpdateManyWithoutCurrentCityNestedInput
  }

  export type MartiniqueCityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersFromOrigin?: UserUncheckedUpdateManyWithoutCityOfOriginNestedInput
    usersCurrent?: UserUncheckedUpdateManyWithoutCurrentCityNestedInput
  }

  export type MartiniqueCityCreateManyInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MartiniqueCityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MartiniqueCityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiasporaLocationCreateInput = {
    id?: string
    country: string
    countryCode: string
    region?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutDiasporaLocationInput
  }

  export type DiasporaLocationUncheckedCreateInput = {
    id?: string
    country: string
    countryCode: string
    region?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDiasporaLocationInput
  }

  export type DiasporaLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutDiasporaLocationNestedInput
  }

  export type DiasporaLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDiasporaLocationNestedInput
  }

  export type DiasporaLocationCreateManyInput = {
    id?: string
    country: string
    countryCode: string
    region?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiasporaLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiasporaLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    cityOfOrigin: MartiniqueCityCreateNestedOneWithoutUsersFromOriginInput
    currentCity: MartiniqueCityCreateNestedOneWithoutUsersCurrentInput
    diasporaLocation?: DiasporaLocationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    cityOfOriginId: string
    currentCityId: string
    diasporaLocationId?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cityOfOrigin?: MartiniqueCityUpdateOneRequiredWithoutUsersFromOriginNestedInput
    currentCity?: MartiniqueCityUpdateOneRequiredWithoutUsersCurrentNestedInput
    diasporaLocation?: DiasporaLocationUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    cityOfOriginId?: StringFieldUpdateOperationsInput | string
    currentCityId?: StringFieldUpdateOperationsInput | string
    diasporaLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    cityOfOriginId: string
    currentCityId: string
    diasporaLocationId?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    cityOfOriginId?: StringFieldUpdateOperationsInput | string
    currentCityId?: StringFieldUpdateOperationsInput | string
    diasporaLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumCityAgglomerationFilter<$PrismaModel = never> = {
    equals?: $Enums.CityAgglomeration | EnumCityAgglomerationFieldRefInput<$PrismaModel>
    in?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    notIn?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    not?: NestedEnumCityAgglomerationFilter<$PrismaModel> | $Enums.CityAgglomeration
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MartiniqueCityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    postalCode?: SortOrder
    agglomeration?: SortOrder
    population?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MartiniqueCityAvgOrderByAggregateInput = {
    population?: SortOrder
  }

  export type MartiniqueCityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    postalCode?: SortOrder
    agglomeration?: SortOrder
    population?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MartiniqueCityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    postalCode?: SortOrder
    agglomeration?: SortOrder
    population?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MartiniqueCitySumOrderByAggregateInput = {
    population?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumCityAgglomerationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CityAgglomeration | EnumCityAgglomerationFieldRefInput<$PrismaModel>
    in?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    notIn?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    not?: NestedEnumCityAgglomerationWithAggregatesFilter<$PrismaModel> | $Enums.CityAgglomeration
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCityAgglomerationFilter<$PrismaModel>
    _max?: NestedEnumCityAgglomerationFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DiasporaLocationCountOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiasporaLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiasporaLocationMinOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    countryCode?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MartiniqueCityScalarRelationFilter = {
    is?: MartiniqueCityWhereInput
    isNot?: MartiniqueCityWhereInput
  }

  export type DiasporaLocationNullableScalarRelationFilter = {
    is?: DiasporaLocationWhereInput | null
    isNot?: DiasporaLocationWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    isDiaspora?: SortOrder
    cityOfOriginId?: SortOrder
    currentCityId?: SortOrder
    diasporaLocationId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    isDiaspora?: SortOrder
    cityOfOriginId?: SortOrder
    currentCityId?: SortOrder
    diasporaLocationId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    isDiaspora?: SortOrder
    cityOfOriginId?: SortOrder
    currentCityId?: SortOrder
    diasporaLocationId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserCreateNestedManyWithoutCityOfOriginInput = {
    create?: XOR<UserCreateWithoutCityOfOriginInput, UserUncheckedCreateWithoutCityOfOriginInput> | UserCreateWithoutCityOfOriginInput[] | UserUncheckedCreateWithoutCityOfOriginInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityOfOriginInput | UserCreateOrConnectWithoutCityOfOriginInput[]
    createMany?: UserCreateManyCityOfOriginInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCurrentCityInput = {
    create?: XOR<UserCreateWithoutCurrentCityInput, UserUncheckedCreateWithoutCurrentCityInput> | UserCreateWithoutCurrentCityInput[] | UserUncheckedCreateWithoutCurrentCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCurrentCityInput | UserCreateOrConnectWithoutCurrentCityInput[]
    createMany?: UserCreateManyCurrentCityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCityOfOriginInput = {
    create?: XOR<UserCreateWithoutCityOfOriginInput, UserUncheckedCreateWithoutCityOfOriginInput> | UserCreateWithoutCityOfOriginInput[] | UserUncheckedCreateWithoutCityOfOriginInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityOfOriginInput | UserCreateOrConnectWithoutCityOfOriginInput[]
    createMany?: UserCreateManyCityOfOriginInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCurrentCityInput = {
    create?: XOR<UserCreateWithoutCurrentCityInput, UserUncheckedCreateWithoutCurrentCityInput> | UserCreateWithoutCurrentCityInput[] | UserUncheckedCreateWithoutCurrentCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCurrentCityInput | UserCreateOrConnectWithoutCurrentCityInput[]
    createMany?: UserCreateManyCurrentCityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumCityAgglomerationFieldUpdateOperationsInput = {
    set?: $Enums.CityAgglomeration
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutCityOfOriginNestedInput = {
    create?: XOR<UserCreateWithoutCityOfOriginInput, UserUncheckedCreateWithoutCityOfOriginInput> | UserCreateWithoutCityOfOriginInput[] | UserUncheckedCreateWithoutCityOfOriginInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityOfOriginInput | UserCreateOrConnectWithoutCityOfOriginInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCityOfOriginInput | UserUpsertWithWhereUniqueWithoutCityOfOriginInput[]
    createMany?: UserCreateManyCityOfOriginInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCityOfOriginInput | UserUpdateWithWhereUniqueWithoutCityOfOriginInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCityOfOriginInput | UserUpdateManyWithWhereWithoutCityOfOriginInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCurrentCityNestedInput = {
    create?: XOR<UserCreateWithoutCurrentCityInput, UserUncheckedCreateWithoutCurrentCityInput> | UserCreateWithoutCurrentCityInput[] | UserUncheckedCreateWithoutCurrentCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCurrentCityInput | UserCreateOrConnectWithoutCurrentCityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCurrentCityInput | UserUpsertWithWhereUniqueWithoutCurrentCityInput[]
    createMany?: UserCreateManyCurrentCityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCurrentCityInput | UserUpdateWithWhereUniqueWithoutCurrentCityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCurrentCityInput | UserUpdateManyWithWhereWithoutCurrentCityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCityOfOriginNestedInput = {
    create?: XOR<UserCreateWithoutCityOfOriginInput, UserUncheckedCreateWithoutCityOfOriginInput> | UserCreateWithoutCityOfOriginInput[] | UserUncheckedCreateWithoutCityOfOriginInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCityOfOriginInput | UserCreateOrConnectWithoutCityOfOriginInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCityOfOriginInput | UserUpsertWithWhereUniqueWithoutCityOfOriginInput[]
    createMany?: UserCreateManyCityOfOriginInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCityOfOriginInput | UserUpdateWithWhereUniqueWithoutCityOfOriginInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCityOfOriginInput | UserUpdateManyWithWhereWithoutCityOfOriginInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCurrentCityNestedInput = {
    create?: XOR<UserCreateWithoutCurrentCityInput, UserUncheckedCreateWithoutCurrentCityInput> | UserCreateWithoutCurrentCityInput[] | UserUncheckedCreateWithoutCurrentCityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCurrentCityInput | UserCreateOrConnectWithoutCurrentCityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCurrentCityInput | UserUpsertWithWhereUniqueWithoutCurrentCityInput[]
    createMany?: UserCreateManyCurrentCityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCurrentCityInput | UserUpdateWithWhereUniqueWithoutCurrentCityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCurrentCityInput | UserUpdateManyWithWhereWithoutCurrentCityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutDiasporaLocationInput = {
    create?: XOR<UserCreateWithoutDiasporaLocationInput, UserUncheckedCreateWithoutDiasporaLocationInput> | UserCreateWithoutDiasporaLocationInput[] | UserUncheckedCreateWithoutDiasporaLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDiasporaLocationInput | UserCreateOrConnectWithoutDiasporaLocationInput[]
    createMany?: UserCreateManyDiasporaLocationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDiasporaLocationInput = {
    create?: XOR<UserCreateWithoutDiasporaLocationInput, UserUncheckedCreateWithoutDiasporaLocationInput> | UserCreateWithoutDiasporaLocationInput[] | UserUncheckedCreateWithoutDiasporaLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDiasporaLocationInput | UserCreateOrConnectWithoutDiasporaLocationInput[]
    createMany?: UserCreateManyDiasporaLocationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateManyWithoutDiasporaLocationNestedInput = {
    create?: XOR<UserCreateWithoutDiasporaLocationInput, UserUncheckedCreateWithoutDiasporaLocationInput> | UserCreateWithoutDiasporaLocationInput[] | UserUncheckedCreateWithoutDiasporaLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDiasporaLocationInput | UserCreateOrConnectWithoutDiasporaLocationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDiasporaLocationInput | UserUpsertWithWhereUniqueWithoutDiasporaLocationInput[]
    createMany?: UserCreateManyDiasporaLocationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDiasporaLocationInput | UserUpdateWithWhereUniqueWithoutDiasporaLocationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDiasporaLocationInput | UserUpdateManyWithWhereWithoutDiasporaLocationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDiasporaLocationNestedInput = {
    create?: XOR<UserCreateWithoutDiasporaLocationInput, UserUncheckedCreateWithoutDiasporaLocationInput> | UserCreateWithoutDiasporaLocationInput[] | UserUncheckedCreateWithoutDiasporaLocationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDiasporaLocationInput | UserCreateOrConnectWithoutDiasporaLocationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDiasporaLocationInput | UserUpsertWithWhereUniqueWithoutDiasporaLocationInput[]
    createMany?: UserCreateManyDiasporaLocationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDiasporaLocationInput | UserUpdateWithWhereUniqueWithoutDiasporaLocationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDiasporaLocationInput | UserUpdateManyWithWhereWithoutDiasporaLocationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MartiniqueCityCreateNestedOneWithoutUsersFromOriginInput = {
    create?: XOR<MartiniqueCityCreateWithoutUsersFromOriginInput, MartiniqueCityUncheckedCreateWithoutUsersFromOriginInput>
    connectOrCreate?: MartiniqueCityCreateOrConnectWithoutUsersFromOriginInput
    connect?: MartiniqueCityWhereUniqueInput
  }

  export type MartiniqueCityCreateNestedOneWithoutUsersCurrentInput = {
    create?: XOR<MartiniqueCityCreateWithoutUsersCurrentInput, MartiniqueCityUncheckedCreateWithoutUsersCurrentInput>
    connectOrCreate?: MartiniqueCityCreateOrConnectWithoutUsersCurrentInput
    connect?: MartiniqueCityWhereUniqueInput
  }

  export type DiasporaLocationCreateNestedOneWithoutUsersInput = {
    create?: XOR<DiasporaLocationCreateWithoutUsersInput, DiasporaLocationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DiasporaLocationCreateOrConnectWithoutUsersInput
    connect?: DiasporaLocationWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type MartiniqueCityUpdateOneRequiredWithoutUsersFromOriginNestedInput = {
    create?: XOR<MartiniqueCityCreateWithoutUsersFromOriginInput, MartiniqueCityUncheckedCreateWithoutUsersFromOriginInput>
    connectOrCreate?: MartiniqueCityCreateOrConnectWithoutUsersFromOriginInput
    upsert?: MartiniqueCityUpsertWithoutUsersFromOriginInput
    connect?: MartiniqueCityWhereUniqueInput
    update?: XOR<XOR<MartiniqueCityUpdateToOneWithWhereWithoutUsersFromOriginInput, MartiniqueCityUpdateWithoutUsersFromOriginInput>, MartiniqueCityUncheckedUpdateWithoutUsersFromOriginInput>
  }

  export type MartiniqueCityUpdateOneRequiredWithoutUsersCurrentNestedInput = {
    create?: XOR<MartiniqueCityCreateWithoutUsersCurrentInput, MartiniqueCityUncheckedCreateWithoutUsersCurrentInput>
    connectOrCreate?: MartiniqueCityCreateOrConnectWithoutUsersCurrentInput
    upsert?: MartiniqueCityUpsertWithoutUsersCurrentInput
    connect?: MartiniqueCityWhereUniqueInput
    update?: XOR<XOR<MartiniqueCityUpdateToOneWithWhereWithoutUsersCurrentInput, MartiniqueCityUpdateWithoutUsersCurrentInput>, MartiniqueCityUncheckedUpdateWithoutUsersCurrentInput>
  }

  export type DiasporaLocationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DiasporaLocationCreateWithoutUsersInput, DiasporaLocationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DiasporaLocationCreateOrConnectWithoutUsersInput
    upsert?: DiasporaLocationUpsertWithoutUsersInput
    disconnect?: DiasporaLocationWhereInput | boolean
    delete?: DiasporaLocationWhereInput | boolean
    connect?: DiasporaLocationWhereUniqueInput
    update?: XOR<XOR<DiasporaLocationUpdateToOneWithWhereWithoutUsersInput, DiasporaLocationUpdateWithoutUsersInput>, DiasporaLocationUncheckedUpdateWithoutUsersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumCityAgglomerationFilter<$PrismaModel = never> = {
    equals?: $Enums.CityAgglomeration | EnumCityAgglomerationFieldRefInput<$PrismaModel>
    in?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    notIn?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    not?: NestedEnumCityAgglomerationFilter<$PrismaModel> | $Enums.CityAgglomeration
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumCityAgglomerationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CityAgglomeration | EnumCityAgglomerationFieldRefInput<$PrismaModel>
    in?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    notIn?: $Enums.CityAgglomeration[] | ListEnumCityAgglomerationFieldRefInput<$PrismaModel>
    not?: NestedEnumCityAgglomerationWithAggregatesFilter<$PrismaModel> | $Enums.CityAgglomeration
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCityAgglomerationFilter<$PrismaModel>
    _max?: NestedEnumCityAgglomerationFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutCityOfOriginInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    currentCity: MartiniqueCityCreateNestedOneWithoutUsersCurrentInput
    diasporaLocation?: DiasporaLocationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCityOfOriginInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    currentCityId: string
    diasporaLocationId?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserCreateOrConnectWithoutCityOfOriginInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCityOfOriginInput, UserUncheckedCreateWithoutCityOfOriginInput>
  }

  export type UserCreateManyCityOfOriginInputEnvelope = {
    data: UserCreateManyCityOfOriginInput | UserCreateManyCityOfOriginInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCurrentCityInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    cityOfOrigin: MartiniqueCityCreateNestedOneWithoutUsersFromOriginInput
    diasporaLocation?: DiasporaLocationCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCurrentCityInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    cityOfOriginId: string
    diasporaLocationId?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserCreateOrConnectWithoutCurrentCityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCurrentCityInput, UserUncheckedCreateWithoutCurrentCityInput>
  }

  export type UserCreateManyCurrentCityInputEnvelope = {
    data: UserCreateManyCurrentCityInput | UserCreateManyCurrentCityInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutCityOfOriginInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCityOfOriginInput, UserUncheckedUpdateWithoutCityOfOriginInput>
    create: XOR<UserCreateWithoutCityOfOriginInput, UserUncheckedCreateWithoutCityOfOriginInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCityOfOriginInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCityOfOriginInput, UserUncheckedUpdateWithoutCityOfOriginInput>
  }

  export type UserUpdateManyWithWhereWithoutCityOfOriginInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCityOfOriginInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    nickname?: StringNullableFilter<"User"> | string | null
    isDiaspora?: BoolFilter<"User"> | boolean
    cityOfOriginId?: StringFilter<"User"> | string
    currentCityId?: StringFilter<"User"> | string
    diasporaLocationId?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutCurrentCityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCurrentCityInput, UserUncheckedUpdateWithoutCurrentCityInput>
    create: XOR<UserCreateWithoutCurrentCityInput, UserUncheckedCreateWithoutCurrentCityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCurrentCityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCurrentCityInput, UserUncheckedUpdateWithoutCurrentCityInput>
  }

  export type UserUpdateManyWithWhereWithoutCurrentCityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCurrentCityInput>
  }

  export type UserCreateWithoutDiasporaLocationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    cityOfOrigin: MartiniqueCityCreateNestedOneWithoutUsersFromOriginInput
    currentCity: MartiniqueCityCreateNestedOneWithoutUsersCurrentInput
  }

  export type UserUncheckedCreateWithoutDiasporaLocationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    cityOfOriginId: string
    currentCityId: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserCreateOrConnectWithoutDiasporaLocationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDiasporaLocationInput, UserUncheckedCreateWithoutDiasporaLocationInput>
  }

  export type UserCreateManyDiasporaLocationInputEnvelope = {
    data: UserCreateManyDiasporaLocationInput | UserCreateManyDiasporaLocationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutDiasporaLocationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDiasporaLocationInput, UserUncheckedUpdateWithoutDiasporaLocationInput>
    create: XOR<UserCreateWithoutDiasporaLocationInput, UserUncheckedCreateWithoutDiasporaLocationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDiasporaLocationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDiasporaLocationInput, UserUncheckedUpdateWithoutDiasporaLocationInput>
  }

  export type UserUpdateManyWithWhereWithoutDiasporaLocationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDiasporaLocationInput>
  }

  export type MartiniqueCityCreateWithoutUsersFromOriginInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usersCurrent?: UserCreateNestedManyWithoutCurrentCityInput
  }

  export type MartiniqueCityUncheckedCreateWithoutUsersFromOriginInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usersCurrent?: UserUncheckedCreateNestedManyWithoutCurrentCityInput
  }

  export type MartiniqueCityCreateOrConnectWithoutUsersFromOriginInput = {
    where: MartiniqueCityWhereUniqueInput
    create: XOR<MartiniqueCityCreateWithoutUsersFromOriginInput, MartiniqueCityUncheckedCreateWithoutUsersFromOriginInput>
  }

  export type MartiniqueCityCreateWithoutUsersCurrentInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usersFromOrigin?: UserCreateNestedManyWithoutCityOfOriginInput
  }

  export type MartiniqueCityUncheckedCreateWithoutUsersCurrentInput = {
    id?: string
    name: string
    postalCode: string
    agglomeration: $Enums.CityAgglomeration
    population: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usersFromOrigin?: UserUncheckedCreateNestedManyWithoutCityOfOriginInput
  }

  export type MartiniqueCityCreateOrConnectWithoutUsersCurrentInput = {
    where: MartiniqueCityWhereUniqueInput
    create: XOR<MartiniqueCityCreateWithoutUsersCurrentInput, MartiniqueCityUncheckedCreateWithoutUsersCurrentInput>
  }

  export type DiasporaLocationCreateWithoutUsersInput = {
    id?: string
    country: string
    countryCode: string
    region?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiasporaLocationUncheckedCreateWithoutUsersInput = {
    id?: string
    country: string
    countryCode: string
    region?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiasporaLocationCreateOrConnectWithoutUsersInput = {
    where: DiasporaLocationWhereUniqueInput
    create: XOR<DiasporaLocationCreateWithoutUsersInput, DiasporaLocationUncheckedCreateWithoutUsersInput>
  }

  export type MartiniqueCityUpsertWithoutUsersFromOriginInput = {
    update: XOR<MartiniqueCityUpdateWithoutUsersFromOriginInput, MartiniqueCityUncheckedUpdateWithoutUsersFromOriginInput>
    create: XOR<MartiniqueCityCreateWithoutUsersFromOriginInput, MartiniqueCityUncheckedCreateWithoutUsersFromOriginInput>
    where?: MartiniqueCityWhereInput
  }

  export type MartiniqueCityUpdateToOneWithWhereWithoutUsersFromOriginInput = {
    where?: MartiniqueCityWhereInput
    data: XOR<MartiniqueCityUpdateWithoutUsersFromOriginInput, MartiniqueCityUncheckedUpdateWithoutUsersFromOriginInput>
  }

  export type MartiniqueCityUpdateWithoutUsersFromOriginInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersCurrent?: UserUpdateManyWithoutCurrentCityNestedInput
  }

  export type MartiniqueCityUncheckedUpdateWithoutUsersFromOriginInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersCurrent?: UserUncheckedUpdateManyWithoutCurrentCityNestedInput
  }

  export type MartiniqueCityUpsertWithoutUsersCurrentInput = {
    update: XOR<MartiniqueCityUpdateWithoutUsersCurrentInput, MartiniqueCityUncheckedUpdateWithoutUsersCurrentInput>
    create: XOR<MartiniqueCityCreateWithoutUsersCurrentInput, MartiniqueCityUncheckedCreateWithoutUsersCurrentInput>
    where?: MartiniqueCityWhereInput
  }

  export type MartiniqueCityUpdateToOneWithWhereWithoutUsersCurrentInput = {
    where?: MartiniqueCityWhereInput
    data: XOR<MartiniqueCityUpdateWithoutUsersCurrentInput, MartiniqueCityUncheckedUpdateWithoutUsersCurrentInput>
  }

  export type MartiniqueCityUpdateWithoutUsersCurrentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersFromOrigin?: UserUpdateManyWithoutCityOfOriginNestedInput
  }

  export type MartiniqueCityUncheckedUpdateWithoutUsersCurrentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    agglomeration?: EnumCityAgglomerationFieldUpdateOperationsInput | $Enums.CityAgglomeration
    population?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usersFromOrigin?: UserUncheckedUpdateManyWithoutCityOfOriginNestedInput
  }

  export type DiasporaLocationUpsertWithoutUsersInput = {
    update: XOR<DiasporaLocationUpdateWithoutUsersInput, DiasporaLocationUncheckedUpdateWithoutUsersInput>
    create: XOR<DiasporaLocationCreateWithoutUsersInput, DiasporaLocationUncheckedCreateWithoutUsersInput>
    where?: DiasporaLocationWhereInput
  }

  export type DiasporaLocationUpdateToOneWithWhereWithoutUsersInput = {
    where?: DiasporaLocationWhereInput
    data: XOR<DiasporaLocationUpdateWithoutUsersInput, DiasporaLocationUncheckedUpdateWithoutUsersInput>
  }

  export type DiasporaLocationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiasporaLocationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyCityOfOriginInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    currentCityId: string
    diasporaLocationId?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserCreateManyCurrentCityInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    cityOfOriginId: string
    diasporaLocationId?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateWithoutCityOfOriginInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentCity?: MartiniqueCityUpdateOneRequiredWithoutUsersCurrentNestedInput
    diasporaLocation?: DiasporaLocationUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCityOfOriginInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    currentCityId?: StringFieldUpdateOperationsInput | string
    diasporaLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyWithoutCityOfOriginInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    currentCityId?: StringFieldUpdateOperationsInput | string
    diasporaLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutCurrentCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cityOfOrigin?: MartiniqueCityUpdateOneRequiredWithoutUsersFromOriginNestedInput
    diasporaLocation?: DiasporaLocationUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCurrentCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    cityOfOriginId?: StringFieldUpdateOperationsInput | string
    diasporaLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyWithoutCurrentCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    cityOfOriginId?: StringFieldUpdateOperationsInput | string
    diasporaLocationId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyDiasporaLocationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    nickname?: string | null
    isDiaspora?: boolean
    cityOfOriginId: string
    currentCityId: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateWithoutDiasporaLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cityOfOrigin?: MartiniqueCityUpdateOneRequiredWithoutUsersFromOriginNestedInput
    currentCity?: MartiniqueCityUpdateOneRequiredWithoutUsersCurrentNestedInput
  }

  export type UserUncheckedUpdateWithoutDiasporaLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    cityOfOriginId?: StringFieldUpdateOperationsInput | string
    currentCityId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyWithoutDiasporaLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    isDiaspora?: BoolFieldUpdateOperationsInput | boolean
    cityOfOriginId?: StringFieldUpdateOperationsInput | string
    currentCityId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}