// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VotingSession {
  id        String   @id @default(uuid())
  title     String
  ideas     Idea[]
  votes     Vote[]
  maxPriorities Int   @default(15)  // e.g., 15
  createdAt      DateTime    @default(now())
  updatedAt   DateTime @updatedAt         // This should auto-update
  description    String?
}

model Idea {
  id          String   @id @default(uuid())
  title       String
  description String?
  session     VotingSession @relation(fields: [sessionId], references: [id])
  sessionId   String
  votes       Vote[]
  createdAt   DateTime @default(now())
}

model Vote {
  id        String   @id @default(uuid())
  session   VotingSession @relation(fields: [sessionId], references: [id])
  sessionId String
  // Reference user from auth service without full duplication
  userId      String   @default("")   // References backend2.User.id
  userEmail   String?  // Optional: For display purposes only
  idea        Idea?    @relation(fields: [ideaId], references: [id])
  ideaId      String?
  score       Int?     
  rank        Int?     
  method      String   @default("SCORE")   
  createdAt   DateTime @default(now())
  scores      Json?    // Legacy field

  @@unique([userId, ideaId, sessionId], name: "unique_vote_per_idea")
  @@index([userId])
}



