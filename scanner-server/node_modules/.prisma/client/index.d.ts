
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ScannerProduct
 * 
 */
export type ScannerProduct = $Result.DefaultSelection<Prisma.$ScannerProductPayload>
/**
 * Model ScannerProductScan
 * 
 */
export type ScannerProductScan = $Result.DefaultSelection<Prisma.$ScannerProductScanPayload>
/**
 * Model ScannerCategory
 * 
 */
export type ScannerCategory = $Result.DefaultSelection<Prisma.$ScannerCategoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ScannerProducts
 * const scannerProducts = await prisma.scannerProduct.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ScannerProducts
   * const scannerProducts = await prisma.scannerProduct.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.scannerProduct`: Exposes CRUD operations for the **ScannerProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScannerProducts
    * const scannerProducts = await prisma.scannerProduct.findMany()
    * ```
    */
  get scannerProduct(): Prisma.ScannerProductDelegate<ExtArgs>;

  /**
   * `prisma.scannerProductScan`: Exposes CRUD operations for the **ScannerProductScan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScannerProductScans
    * const scannerProductScans = await prisma.scannerProductScan.findMany()
    * ```
    */
  get scannerProductScan(): Prisma.ScannerProductScanDelegate<ExtArgs>;

  /**
   * `prisma.scannerCategory`: Exposes CRUD operations for the **ScannerCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScannerCategories
    * const scannerCategories = await prisma.scannerCategory.findMany()
    * ```
    */
  get scannerCategory(): Prisma.ScannerCategoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ScannerProduct: 'ScannerProduct',
    ScannerProductScan: 'ScannerProductScan',
    ScannerCategory: 'ScannerCategory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "scannerProduct" | "scannerProductScan" | "scannerCategory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ScannerProduct: {
        payload: Prisma.$ScannerProductPayload<ExtArgs>
        fields: Prisma.ScannerProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScannerProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScannerProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>
          }
          findFirst: {
            args: Prisma.ScannerProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScannerProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>
          }
          findMany: {
            args: Prisma.ScannerProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>[]
          }
          create: {
            args: Prisma.ScannerProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>
          }
          createMany: {
            args: Prisma.ScannerProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScannerProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>[]
          }
          delete: {
            args: Prisma.ScannerProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>
          }
          update: {
            args: Prisma.ScannerProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>
          }
          deleteMany: {
            args: Prisma.ScannerProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScannerProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScannerProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductPayload>
          }
          aggregate: {
            args: Prisma.ScannerProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScannerProduct>
          }
          groupBy: {
            args: Prisma.ScannerProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScannerProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScannerProductCountArgs<ExtArgs>
            result: $Utils.Optional<ScannerProductCountAggregateOutputType> | number
          }
        }
      }
      ScannerProductScan: {
        payload: Prisma.$ScannerProductScanPayload<ExtArgs>
        fields: Prisma.ScannerProductScanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScannerProductScanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScannerProductScanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>
          }
          findFirst: {
            args: Prisma.ScannerProductScanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScannerProductScanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>
          }
          findMany: {
            args: Prisma.ScannerProductScanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>[]
          }
          create: {
            args: Prisma.ScannerProductScanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>
          }
          createMany: {
            args: Prisma.ScannerProductScanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScannerProductScanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>[]
          }
          delete: {
            args: Prisma.ScannerProductScanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>
          }
          update: {
            args: Prisma.ScannerProductScanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>
          }
          deleteMany: {
            args: Prisma.ScannerProductScanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScannerProductScanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScannerProductScanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerProductScanPayload>
          }
          aggregate: {
            args: Prisma.ScannerProductScanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScannerProductScan>
          }
          groupBy: {
            args: Prisma.ScannerProductScanGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScannerProductScanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScannerProductScanCountArgs<ExtArgs>
            result: $Utils.Optional<ScannerProductScanCountAggregateOutputType> | number
          }
        }
      }
      ScannerCategory: {
        payload: Prisma.$ScannerCategoryPayload<ExtArgs>
        fields: Prisma.ScannerCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScannerCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScannerCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>
          }
          findFirst: {
            args: Prisma.ScannerCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScannerCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>
          }
          findMany: {
            args: Prisma.ScannerCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>[]
          }
          create: {
            args: Prisma.ScannerCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>
          }
          createMany: {
            args: Prisma.ScannerCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScannerCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>[]
          }
          delete: {
            args: Prisma.ScannerCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>
          }
          update: {
            args: Prisma.ScannerCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ScannerCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScannerCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScannerCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannerCategoryPayload>
          }
          aggregate: {
            args: Prisma.ScannerCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScannerCategory>
          }
          groupBy: {
            args: Prisma.ScannerCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScannerCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScannerCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ScannerCategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ScannerProductCountOutputType
   */

  export type ScannerProductCountOutputType = {
    scans: number
  }

  export type ScannerProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scans?: boolean | ScannerProductCountOutputTypeCountScansArgs
  }

  // Custom InputTypes
  /**
   * ScannerProductCountOutputType without action
   */
  export type ScannerProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductCountOutputType
     */
    select?: ScannerProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScannerProductCountOutputType without action
   */
  export type ScannerProductCountOutputTypeCountScansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannerProductScanWhereInput
  }


  /**
   * Count Type ScannerCategoryCountOutputType
   */

  export type ScannerCategoryCountOutputType = {
    products: number
  }

  export type ScannerCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ScannerCategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * ScannerCategoryCountOutputType without action
   */
  export type ScannerCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategoryCountOutputType
     */
    select?: ScannerCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScannerCategoryCountOutputType without action
   */
  export type ScannerCategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannerProductWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ScannerProduct
   */

  export type AggregateScannerProduct = {
    _count: ScannerProductCountAggregateOutputType | null
    _min: ScannerProductMinAggregateOutputType | null
    _max: ScannerProductMaxAggregateOutputType | null
  }

  export type ScannerProductMinAggregateOutputType = {
    id: string | null
    barcode: string | null
    name: string | null
    brand: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type ScannerProductMaxAggregateOutputType = {
    id: string | null
    barcode: string | null
    name: string | null
    brand: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type ScannerProductCountAggregateOutputType = {
    id: number
    barcode: number
    name: number
    brand: number
    categoryId: number
    createdAt: number
    _all: number
  }


  export type ScannerProductMinAggregateInputType = {
    id?: true
    barcode?: true
    name?: true
    brand?: true
    categoryId?: true
    createdAt?: true
  }

  export type ScannerProductMaxAggregateInputType = {
    id?: true
    barcode?: true
    name?: true
    brand?: true
    categoryId?: true
    createdAt?: true
  }

  export type ScannerProductCountAggregateInputType = {
    id?: true
    barcode?: true
    name?: true
    brand?: true
    categoryId?: true
    createdAt?: true
    _all?: true
  }

  export type ScannerProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannerProduct to aggregate.
     */
    where?: ScannerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProducts to fetch.
     */
    orderBy?: ScannerProductOrderByWithRelationInput | ScannerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScannerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScannerProducts
    **/
    _count?: true | ScannerProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScannerProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScannerProductMaxAggregateInputType
  }

  export type GetScannerProductAggregateType<T extends ScannerProductAggregateArgs> = {
        [P in keyof T & keyof AggregateScannerProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScannerProduct[P]>
      : GetScalarType<T[P], AggregateScannerProduct[P]>
  }




  export type ScannerProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannerProductWhereInput
    orderBy?: ScannerProductOrderByWithAggregationInput | ScannerProductOrderByWithAggregationInput[]
    by: ScannerProductScalarFieldEnum[] | ScannerProductScalarFieldEnum
    having?: ScannerProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScannerProductCountAggregateInputType | true
    _min?: ScannerProductMinAggregateInputType
    _max?: ScannerProductMaxAggregateInputType
  }

  export type ScannerProductGroupByOutputType = {
    id: string
    barcode: string
    name: string | null
    brand: string | null
    categoryId: string
    createdAt: Date
    _count: ScannerProductCountAggregateOutputType | null
    _min: ScannerProductMinAggregateOutputType | null
    _max: ScannerProductMaxAggregateOutputType | null
  }

  type GetScannerProductGroupByPayload<T extends ScannerProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScannerProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScannerProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScannerProductGroupByOutputType[P]>
            : GetScalarType<T[P], ScannerProductGroupByOutputType[P]>
        }
      >
    >


  export type ScannerProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    name?: boolean
    brand?: boolean
    categoryId?: boolean
    createdAt?: boolean
    category?: boolean | ScannerCategoryDefaultArgs<ExtArgs>
    scans?: boolean | ScannerProduct$scansArgs<ExtArgs>
    _count?: boolean | ScannerProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scannerProduct"]>

  export type ScannerProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    name?: boolean
    brand?: boolean
    categoryId?: boolean
    createdAt?: boolean
    category?: boolean | ScannerCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scannerProduct"]>

  export type ScannerProductSelectScalar = {
    id?: boolean
    barcode?: boolean
    name?: boolean
    brand?: boolean
    categoryId?: boolean
    createdAt?: boolean
  }

  export type ScannerProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ScannerCategoryDefaultArgs<ExtArgs>
    scans?: boolean | ScannerProduct$scansArgs<ExtArgs>
    _count?: boolean | ScannerProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScannerProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ScannerCategoryDefaultArgs<ExtArgs>
  }

  export type $ScannerProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScannerProduct"
    objects: {
      category: Prisma.$ScannerCategoryPayload<ExtArgs>
      scans: Prisma.$ScannerProductScanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      barcode: string
      name: string | null
      brand: string | null
      categoryId: string
      createdAt: Date
    }, ExtArgs["result"]["scannerProduct"]>
    composites: {}
  }

  type ScannerProductGetPayload<S extends boolean | null | undefined | ScannerProductDefaultArgs> = $Result.GetResult<Prisma.$ScannerProductPayload, S>

  type ScannerProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScannerProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScannerProductCountAggregateInputType | true
    }

  export interface ScannerProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScannerProduct'], meta: { name: 'ScannerProduct' } }
    /**
     * Find zero or one ScannerProduct that matches the filter.
     * @param {ScannerProductFindUniqueArgs} args - Arguments to find a ScannerProduct
     * @example
     * // Get one ScannerProduct
     * const scannerProduct = await prisma.scannerProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScannerProductFindUniqueArgs>(args: SelectSubset<T, ScannerProductFindUniqueArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScannerProduct that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScannerProductFindUniqueOrThrowArgs} args - Arguments to find a ScannerProduct
     * @example
     * // Get one ScannerProduct
     * const scannerProduct = await prisma.scannerProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScannerProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ScannerProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScannerProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductFindFirstArgs} args - Arguments to find a ScannerProduct
     * @example
     * // Get one ScannerProduct
     * const scannerProduct = await prisma.scannerProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScannerProductFindFirstArgs>(args?: SelectSubset<T, ScannerProductFindFirstArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScannerProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductFindFirstOrThrowArgs} args - Arguments to find a ScannerProduct
     * @example
     * // Get one ScannerProduct
     * const scannerProduct = await prisma.scannerProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScannerProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ScannerProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScannerProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScannerProducts
     * const scannerProducts = await prisma.scannerProduct.findMany()
     * 
     * // Get first 10 ScannerProducts
     * const scannerProducts = await prisma.scannerProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scannerProductWithIdOnly = await prisma.scannerProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScannerProductFindManyArgs>(args?: SelectSubset<T, ScannerProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScannerProduct.
     * @param {ScannerProductCreateArgs} args - Arguments to create a ScannerProduct.
     * @example
     * // Create one ScannerProduct
     * const ScannerProduct = await prisma.scannerProduct.create({
     *   data: {
     *     // ... data to create a ScannerProduct
     *   }
     * })
     * 
     */
    create<T extends ScannerProductCreateArgs>(args: SelectSubset<T, ScannerProductCreateArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScannerProducts.
     * @param {ScannerProductCreateManyArgs} args - Arguments to create many ScannerProducts.
     * @example
     * // Create many ScannerProducts
     * const scannerProduct = await prisma.scannerProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScannerProductCreateManyArgs>(args?: SelectSubset<T, ScannerProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScannerProducts and returns the data saved in the database.
     * @param {ScannerProductCreateManyAndReturnArgs} args - Arguments to create many ScannerProducts.
     * @example
     * // Create many ScannerProducts
     * const scannerProduct = await prisma.scannerProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScannerProducts and only return the `id`
     * const scannerProductWithIdOnly = await prisma.scannerProduct.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScannerProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ScannerProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScannerProduct.
     * @param {ScannerProductDeleteArgs} args - Arguments to delete one ScannerProduct.
     * @example
     * // Delete one ScannerProduct
     * const ScannerProduct = await prisma.scannerProduct.delete({
     *   where: {
     *     // ... filter to delete one ScannerProduct
     *   }
     * })
     * 
     */
    delete<T extends ScannerProductDeleteArgs>(args: SelectSubset<T, ScannerProductDeleteArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScannerProduct.
     * @param {ScannerProductUpdateArgs} args - Arguments to update one ScannerProduct.
     * @example
     * // Update one ScannerProduct
     * const scannerProduct = await prisma.scannerProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScannerProductUpdateArgs>(args: SelectSubset<T, ScannerProductUpdateArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScannerProducts.
     * @param {ScannerProductDeleteManyArgs} args - Arguments to filter ScannerProducts to delete.
     * @example
     * // Delete a few ScannerProducts
     * const { count } = await prisma.scannerProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScannerProductDeleteManyArgs>(args?: SelectSubset<T, ScannerProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScannerProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScannerProducts
     * const scannerProduct = await prisma.scannerProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScannerProductUpdateManyArgs>(args: SelectSubset<T, ScannerProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScannerProduct.
     * @param {ScannerProductUpsertArgs} args - Arguments to update or create a ScannerProduct.
     * @example
     * // Update or create a ScannerProduct
     * const scannerProduct = await prisma.scannerProduct.upsert({
     *   create: {
     *     // ... data to create a ScannerProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScannerProduct we want to update
     *   }
     * })
     */
    upsert<T extends ScannerProductUpsertArgs>(args: SelectSubset<T, ScannerProductUpsertArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScannerProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductCountArgs} args - Arguments to filter ScannerProducts to count.
     * @example
     * // Count the number of ScannerProducts
     * const count = await prisma.scannerProduct.count({
     *   where: {
     *     // ... the filter for the ScannerProducts we want to count
     *   }
     * })
    **/
    count<T extends ScannerProductCountArgs>(
      args?: Subset<T, ScannerProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScannerProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScannerProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScannerProductAggregateArgs>(args: Subset<T, ScannerProductAggregateArgs>): Prisma.PrismaPromise<GetScannerProductAggregateType<T>>

    /**
     * Group by ScannerProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScannerProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScannerProductGroupByArgs['orderBy'] }
        : { orderBy?: ScannerProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScannerProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScannerProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScannerProduct model
   */
  readonly fields: ScannerProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScannerProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScannerProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends ScannerCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScannerCategoryDefaultArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    scans<T extends ScannerProduct$scansArgs<ExtArgs> = {}>(args?: Subset<T, ScannerProduct$scansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScannerProduct model
   */ 
  interface ScannerProductFieldRefs {
    readonly id: FieldRef<"ScannerProduct", 'String'>
    readonly barcode: FieldRef<"ScannerProduct", 'String'>
    readonly name: FieldRef<"ScannerProduct", 'String'>
    readonly brand: FieldRef<"ScannerProduct", 'String'>
    readonly categoryId: FieldRef<"ScannerProduct", 'String'>
    readonly createdAt: FieldRef<"ScannerProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScannerProduct findUnique
   */
  export type ScannerProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProduct to fetch.
     */
    where: ScannerProductWhereUniqueInput
  }

  /**
   * ScannerProduct findUniqueOrThrow
   */
  export type ScannerProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProduct to fetch.
     */
    where: ScannerProductWhereUniqueInput
  }

  /**
   * ScannerProduct findFirst
   */
  export type ScannerProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProduct to fetch.
     */
    where?: ScannerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProducts to fetch.
     */
    orderBy?: ScannerProductOrderByWithRelationInput | ScannerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannerProducts.
     */
    cursor?: ScannerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannerProducts.
     */
    distinct?: ScannerProductScalarFieldEnum | ScannerProductScalarFieldEnum[]
  }

  /**
   * ScannerProduct findFirstOrThrow
   */
  export type ScannerProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProduct to fetch.
     */
    where?: ScannerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProducts to fetch.
     */
    orderBy?: ScannerProductOrderByWithRelationInput | ScannerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannerProducts.
     */
    cursor?: ScannerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannerProducts.
     */
    distinct?: ScannerProductScalarFieldEnum | ScannerProductScalarFieldEnum[]
  }

  /**
   * ScannerProduct findMany
   */
  export type ScannerProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProducts to fetch.
     */
    where?: ScannerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProducts to fetch.
     */
    orderBy?: ScannerProductOrderByWithRelationInput | ScannerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScannerProducts.
     */
    cursor?: ScannerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProducts.
     */
    skip?: number
    distinct?: ScannerProductScalarFieldEnum | ScannerProductScalarFieldEnum[]
  }

  /**
   * ScannerProduct create
   */
  export type ScannerProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * The data needed to create a ScannerProduct.
     */
    data: XOR<ScannerProductCreateInput, ScannerProductUncheckedCreateInput>
  }

  /**
   * ScannerProduct createMany
   */
  export type ScannerProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScannerProducts.
     */
    data: ScannerProductCreateManyInput | ScannerProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScannerProduct createManyAndReturn
   */
  export type ScannerProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScannerProducts.
     */
    data: ScannerProductCreateManyInput | ScannerProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScannerProduct update
   */
  export type ScannerProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * The data needed to update a ScannerProduct.
     */
    data: XOR<ScannerProductUpdateInput, ScannerProductUncheckedUpdateInput>
    /**
     * Choose, which ScannerProduct to update.
     */
    where: ScannerProductWhereUniqueInput
  }

  /**
   * ScannerProduct updateMany
   */
  export type ScannerProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScannerProducts.
     */
    data: XOR<ScannerProductUpdateManyMutationInput, ScannerProductUncheckedUpdateManyInput>
    /**
     * Filter which ScannerProducts to update
     */
    where?: ScannerProductWhereInput
  }

  /**
   * ScannerProduct upsert
   */
  export type ScannerProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * The filter to search for the ScannerProduct to update in case it exists.
     */
    where: ScannerProductWhereUniqueInput
    /**
     * In case the ScannerProduct found by the `where` argument doesn't exist, create a new ScannerProduct with this data.
     */
    create: XOR<ScannerProductCreateInput, ScannerProductUncheckedCreateInput>
    /**
     * In case the ScannerProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScannerProductUpdateInput, ScannerProductUncheckedUpdateInput>
  }

  /**
   * ScannerProduct delete
   */
  export type ScannerProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    /**
     * Filter which ScannerProduct to delete.
     */
    where: ScannerProductWhereUniqueInput
  }

  /**
   * ScannerProduct deleteMany
   */
  export type ScannerProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannerProducts to delete
     */
    where?: ScannerProductWhereInput
  }

  /**
   * ScannerProduct.scans
   */
  export type ScannerProduct$scansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    where?: ScannerProductScanWhereInput
    orderBy?: ScannerProductScanOrderByWithRelationInput | ScannerProductScanOrderByWithRelationInput[]
    cursor?: ScannerProductScanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScannerProductScanScalarFieldEnum | ScannerProductScanScalarFieldEnum[]
  }

  /**
   * ScannerProduct without action
   */
  export type ScannerProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
  }


  /**
   * Model ScannerProductScan
   */

  export type AggregateScannerProductScan = {
    _count: ScannerProductScanCountAggregateOutputType | null
    _avg: ScannerProductScanAvgAggregateOutputType | null
    _sum: ScannerProductScanSumAggregateOutputType | null
    _min: ScannerProductScanMinAggregateOutputType | null
    _max: ScannerProductScanMaxAggregateOutputType | null
  }

  export type ScannerProductScanAvgAggregateOutputType = {
    price: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ScannerProductScanSumAggregateOutputType = {
    price: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ScannerProductScanMinAggregateOutputType = {
    id: string | null
    productId: string | null
    price: number | null
    imageUrl: string | null
    qualityScore: string | null
    shopName: string | null
    location: string | null
    externalUserId: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
  }

  export type ScannerProductScanMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    price: number | null
    imageUrl: string | null
    qualityScore: string | null
    shopName: string | null
    location: string | null
    externalUserId: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
  }

  export type ScannerProductScanCountAggregateOutputType = {
    id: number
    productId: number
    price: number
    imageUrl: number
    qualityScore: number
    shopName: number
    location: number
    externalUserId: number
    latitude: number
    longitude: number
    createdAt: number
    _all: number
  }


  export type ScannerProductScanAvgAggregateInputType = {
    price?: true
    latitude?: true
    longitude?: true
  }

  export type ScannerProductScanSumAggregateInputType = {
    price?: true
    latitude?: true
    longitude?: true
  }

  export type ScannerProductScanMinAggregateInputType = {
    id?: true
    productId?: true
    price?: true
    imageUrl?: true
    qualityScore?: true
    shopName?: true
    location?: true
    externalUserId?: true
    latitude?: true
    longitude?: true
    createdAt?: true
  }

  export type ScannerProductScanMaxAggregateInputType = {
    id?: true
    productId?: true
    price?: true
    imageUrl?: true
    qualityScore?: true
    shopName?: true
    location?: true
    externalUserId?: true
    latitude?: true
    longitude?: true
    createdAt?: true
  }

  export type ScannerProductScanCountAggregateInputType = {
    id?: true
    productId?: true
    price?: true
    imageUrl?: true
    qualityScore?: true
    shopName?: true
    location?: true
    externalUserId?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    _all?: true
  }

  export type ScannerProductScanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannerProductScan to aggregate.
     */
    where?: ScannerProductScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProductScans to fetch.
     */
    orderBy?: ScannerProductScanOrderByWithRelationInput | ScannerProductScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScannerProductScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProductScans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProductScans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScannerProductScans
    **/
    _count?: true | ScannerProductScanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScannerProductScanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScannerProductScanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScannerProductScanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScannerProductScanMaxAggregateInputType
  }

  export type GetScannerProductScanAggregateType<T extends ScannerProductScanAggregateArgs> = {
        [P in keyof T & keyof AggregateScannerProductScan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScannerProductScan[P]>
      : GetScalarType<T[P], AggregateScannerProductScan[P]>
  }




  export type ScannerProductScanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannerProductScanWhereInput
    orderBy?: ScannerProductScanOrderByWithAggregationInput | ScannerProductScanOrderByWithAggregationInput[]
    by: ScannerProductScanScalarFieldEnum[] | ScannerProductScanScalarFieldEnum
    having?: ScannerProductScanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScannerProductScanCountAggregateInputType | true
    _avg?: ScannerProductScanAvgAggregateInputType
    _sum?: ScannerProductScanSumAggregateInputType
    _min?: ScannerProductScanMinAggregateInputType
    _max?: ScannerProductScanMaxAggregateInputType
  }

  export type ScannerProductScanGroupByOutputType = {
    id: string
    productId: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date
    _count: ScannerProductScanCountAggregateOutputType | null
    _avg: ScannerProductScanAvgAggregateOutputType | null
    _sum: ScannerProductScanSumAggregateOutputType | null
    _min: ScannerProductScanMinAggregateOutputType | null
    _max: ScannerProductScanMaxAggregateOutputType | null
  }

  type GetScannerProductScanGroupByPayload<T extends ScannerProductScanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScannerProductScanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScannerProductScanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScannerProductScanGroupByOutputType[P]>
            : GetScalarType<T[P], ScannerProductScanGroupByOutputType[P]>
        }
      >
    >


  export type ScannerProductScanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    price?: boolean
    imageUrl?: boolean
    qualityScore?: boolean
    shopName?: boolean
    location?: boolean
    externalUserId?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    product?: boolean | ScannerProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scannerProductScan"]>

  export type ScannerProductScanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    price?: boolean
    imageUrl?: boolean
    qualityScore?: boolean
    shopName?: boolean
    location?: boolean
    externalUserId?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    product?: boolean | ScannerProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scannerProductScan"]>

  export type ScannerProductScanSelectScalar = {
    id?: boolean
    productId?: boolean
    price?: boolean
    imageUrl?: boolean
    qualityScore?: boolean
    shopName?: boolean
    location?: boolean
    externalUserId?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
  }

  export type ScannerProductScanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ScannerProductDefaultArgs<ExtArgs>
  }
  export type ScannerProductScanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ScannerProductDefaultArgs<ExtArgs>
  }

  export type $ScannerProductScanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScannerProductScan"
    objects: {
      product: Prisma.$ScannerProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      price: number
      imageUrl: string
      qualityScore: string
      shopName: string
      location: string
      externalUserId: string | null
      latitude: number | null
      longitude: number | null
      createdAt: Date
    }, ExtArgs["result"]["scannerProductScan"]>
    composites: {}
  }

  type ScannerProductScanGetPayload<S extends boolean | null | undefined | ScannerProductScanDefaultArgs> = $Result.GetResult<Prisma.$ScannerProductScanPayload, S>

  type ScannerProductScanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScannerProductScanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScannerProductScanCountAggregateInputType | true
    }

  export interface ScannerProductScanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScannerProductScan'], meta: { name: 'ScannerProductScan' } }
    /**
     * Find zero or one ScannerProductScan that matches the filter.
     * @param {ScannerProductScanFindUniqueArgs} args - Arguments to find a ScannerProductScan
     * @example
     * // Get one ScannerProductScan
     * const scannerProductScan = await prisma.scannerProductScan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScannerProductScanFindUniqueArgs>(args: SelectSubset<T, ScannerProductScanFindUniqueArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScannerProductScan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScannerProductScanFindUniqueOrThrowArgs} args - Arguments to find a ScannerProductScan
     * @example
     * // Get one ScannerProductScan
     * const scannerProductScan = await prisma.scannerProductScan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScannerProductScanFindUniqueOrThrowArgs>(args: SelectSubset<T, ScannerProductScanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScannerProductScan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanFindFirstArgs} args - Arguments to find a ScannerProductScan
     * @example
     * // Get one ScannerProductScan
     * const scannerProductScan = await prisma.scannerProductScan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScannerProductScanFindFirstArgs>(args?: SelectSubset<T, ScannerProductScanFindFirstArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScannerProductScan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanFindFirstOrThrowArgs} args - Arguments to find a ScannerProductScan
     * @example
     * // Get one ScannerProductScan
     * const scannerProductScan = await prisma.scannerProductScan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScannerProductScanFindFirstOrThrowArgs>(args?: SelectSubset<T, ScannerProductScanFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScannerProductScans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScannerProductScans
     * const scannerProductScans = await prisma.scannerProductScan.findMany()
     * 
     * // Get first 10 ScannerProductScans
     * const scannerProductScans = await prisma.scannerProductScan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scannerProductScanWithIdOnly = await prisma.scannerProductScan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScannerProductScanFindManyArgs>(args?: SelectSubset<T, ScannerProductScanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScannerProductScan.
     * @param {ScannerProductScanCreateArgs} args - Arguments to create a ScannerProductScan.
     * @example
     * // Create one ScannerProductScan
     * const ScannerProductScan = await prisma.scannerProductScan.create({
     *   data: {
     *     // ... data to create a ScannerProductScan
     *   }
     * })
     * 
     */
    create<T extends ScannerProductScanCreateArgs>(args: SelectSubset<T, ScannerProductScanCreateArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScannerProductScans.
     * @param {ScannerProductScanCreateManyArgs} args - Arguments to create many ScannerProductScans.
     * @example
     * // Create many ScannerProductScans
     * const scannerProductScan = await prisma.scannerProductScan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScannerProductScanCreateManyArgs>(args?: SelectSubset<T, ScannerProductScanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScannerProductScans and returns the data saved in the database.
     * @param {ScannerProductScanCreateManyAndReturnArgs} args - Arguments to create many ScannerProductScans.
     * @example
     * // Create many ScannerProductScans
     * const scannerProductScan = await prisma.scannerProductScan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScannerProductScans and only return the `id`
     * const scannerProductScanWithIdOnly = await prisma.scannerProductScan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScannerProductScanCreateManyAndReturnArgs>(args?: SelectSubset<T, ScannerProductScanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScannerProductScan.
     * @param {ScannerProductScanDeleteArgs} args - Arguments to delete one ScannerProductScan.
     * @example
     * // Delete one ScannerProductScan
     * const ScannerProductScan = await prisma.scannerProductScan.delete({
     *   where: {
     *     // ... filter to delete one ScannerProductScan
     *   }
     * })
     * 
     */
    delete<T extends ScannerProductScanDeleteArgs>(args: SelectSubset<T, ScannerProductScanDeleteArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScannerProductScan.
     * @param {ScannerProductScanUpdateArgs} args - Arguments to update one ScannerProductScan.
     * @example
     * // Update one ScannerProductScan
     * const scannerProductScan = await prisma.scannerProductScan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScannerProductScanUpdateArgs>(args: SelectSubset<T, ScannerProductScanUpdateArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScannerProductScans.
     * @param {ScannerProductScanDeleteManyArgs} args - Arguments to filter ScannerProductScans to delete.
     * @example
     * // Delete a few ScannerProductScans
     * const { count } = await prisma.scannerProductScan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScannerProductScanDeleteManyArgs>(args?: SelectSubset<T, ScannerProductScanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScannerProductScans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScannerProductScans
     * const scannerProductScan = await prisma.scannerProductScan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScannerProductScanUpdateManyArgs>(args: SelectSubset<T, ScannerProductScanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScannerProductScan.
     * @param {ScannerProductScanUpsertArgs} args - Arguments to update or create a ScannerProductScan.
     * @example
     * // Update or create a ScannerProductScan
     * const scannerProductScan = await prisma.scannerProductScan.upsert({
     *   create: {
     *     // ... data to create a ScannerProductScan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScannerProductScan we want to update
     *   }
     * })
     */
    upsert<T extends ScannerProductScanUpsertArgs>(args: SelectSubset<T, ScannerProductScanUpsertArgs<ExtArgs>>): Prisma__ScannerProductScanClient<$Result.GetResult<Prisma.$ScannerProductScanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScannerProductScans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanCountArgs} args - Arguments to filter ScannerProductScans to count.
     * @example
     * // Count the number of ScannerProductScans
     * const count = await prisma.scannerProductScan.count({
     *   where: {
     *     // ... the filter for the ScannerProductScans we want to count
     *   }
     * })
    **/
    count<T extends ScannerProductScanCountArgs>(
      args?: Subset<T, ScannerProductScanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScannerProductScanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScannerProductScan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScannerProductScanAggregateArgs>(args: Subset<T, ScannerProductScanAggregateArgs>): Prisma.PrismaPromise<GetScannerProductScanAggregateType<T>>

    /**
     * Group by ScannerProductScan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerProductScanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScannerProductScanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScannerProductScanGroupByArgs['orderBy'] }
        : { orderBy?: ScannerProductScanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScannerProductScanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScannerProductScanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScannerProductScan model
   */
  readonly fields: ScannerProductScanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScannerProductScan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScannerProductScanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ScannerProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScannerProductDefaultArgs<ExtArgs>>): Prisma__ScannerProductClient<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScannerProductScan model
   */ 
  interface ScannerProductScanFieldRefs {
    readonly id: FieldRef<"ScannerProductScan", 'String'>
    readonly productId: FieldRef<"ScannerProductScan", 'String'>
    readonly price: FieldRef<"ScannerProductScan", 'Float'>
    readonly imageUrl: FieldRef<"ScannerProductScan", 'String'>
    readonly qualityScore: FieldRef<"ScannerProductScan", 'String'>
    readonly shopName: FieldRef<"ScannerProductScan", 'String'>
    readonly location: FieldRef<"ScannerProductScan", 'String'>
    readonly externalUserId: FieldRef<"ScannerProductScan", 'String'>
    readonly latitude: FieldRef<"ScannerProductScan", 'Float'>
    readonly longitude: FieldRef<"ScannerProductScan", 'Float'>
    readonly createdAt: FieldRef<"ScannerProductScan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScannerProductScan findUnique
   */
  export type ScannerProductScanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProductScan to fetch.
     */
    where: ScannerProductScanWhereUniqueInput
  }

  /**
   * ScannerProductScan findUniqueOrThrow
   */
  export type ScannerProductScanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProductScan to fetch.
     */
    where: ScannerProductScanWhereUniqueInput
  }

  /**
   * ScannerProductScan findFirst
   */
  export type ScannerProductScanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProductScan to fetch.
     */
    where?: ScannerProductScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProductScans to fetch.
     */
    orderBy?: ScannerProductScanOrderByWithRelationInput | ScannerProductScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannerProductScans.
     */
    cursor?: ScannerProductScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProductScans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProductScans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannerProductScans.
     */
    distinct?: ScannerProductScanScalarFieldEnum | ScannerProductScanScalarFieldEnum[]
  }

  /**
   * ScannerProductScan findFirstOrThrow
   */
  export type ScannerProductScanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProductScan to fetch.
     */
    where?: ScannerProductScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProductScans to fetch.
     */
    orderBy?: ScannerProductScanOrderByWithRelationInput | ScannerProductScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannerProductScans.
     */
    cursor?: ScannerProductScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProductScans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProductScans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannerProductScans.
     */
    distinct?: ScannerProductScanScalarFieldEnum | ScannerProductScanScalarFieldEnum[]
  }

  /**
   * ScannerProductScan findMany
   */
  export type ScannerProductScanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * Filter, which ScannerProductScans to fetch.
     */
    where?: ScannerProductScanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerProductScans to fetch.
     */
    orderBy?: ScannerProductScanOrderByWithRelationInput | ScannerProductScanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScannerProductScans.
     */
    cursor?: ScannerProductScanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerProductScans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerProductScans.
     */
    skip?: number
    distinct?: ScannerProductScanScalarFieldEnum | ScannerProductScanScalarFieldEnum[]
  }

  /**
   * ScannerProductScan create
   */
  export type ScannerProductScanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * The data needed to create a ScannerProductScan.
     */
    data: XOR<ScannerProductScanCreateInput, ScannerProductScanUncheckedCreateInput>
  }

  /**
   * ScannerProductScan createMany
   */
  export type ScannerProductScanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScannerProductScans.
     */
    data: ScannerProductScanCreateManyInput | ScannerProductScanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScannerProductScan createManyAndReturn
   */
  export type ScannerProductScanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScannerProductScans.
     */
    data: ScannerProductScanCreateManyInput | ScannerProductScanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScannerProductScan update
   */
  export type ScannerProductScanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * The data needed to update a ScannerProductScan.
     */
    data: XOR<ScannerProductScanUpdateInput, ScannerProductScanUncheckedUpdateInput>
    /**
     * Choose, which ScannerProductScan to update.
     */
    where: ScannerProductScanWhereUniqueInput
  }

  /**
   * ScannerProductScan updateMany
   */
  export type ScannerProductScanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScannerProductScans.
     */
    data: XOR<ScannerProductScanUpdateManyMutationInput, ScannerProductScanUncheckedUpdateManyInput>
    /**
     * Filter which ScannerProductScans to update
     */
    where?: ScannerProductScanWhereInput
  }

  /**
   * ScannerProductScan upsert
   */
  export type ScannerProductScanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * The filter to search for the ScannerProductScan to update in case it exists.
     */
    where: ScannerProductScanWhereUniqueInput
    /**
     * In case the ScannerProductScan found by the `where` argument doesn't exist, create a new ScannerProductScan with this data.
     */
    create: XOR<ScannerProductScanCreateInput, ScannerProductScanUncheckedCreateInput>
    /**
     * In case the ScannerProductScan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScannerProductScanUpdateInput, ScannerProductScanUncheckedUpdateInput>
  }

  /**
   * ScannerProductScan delete
   */
  export type ScannerProductScanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
    /**
     * Filter which ScannerProductScan to delete.
     */
    where: ScannerProductScanWhereUniqueInput
  }

  /**
   * ScannerProductScan deleteMany
   */
  export type ScannerProductScanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannerProductScans to delete
     */
    where?: ScannerProductScanWhereInput
  }

  /**
   * ScannerProductScan without action
   */
  export type ScannerProductScanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProductScan
     */
    select?: ScannerProductScanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductScanInclude<ExtArgs> | null
  }


  /**
   * Model ScannerCategory
   */

  export type AggregateScannerCategory = {
    _count: ScannerCategoryCountAggregateOutputType | null
    _min: ScannerCategoryMinAggregateOutputType | null
    _max: ScannerCategoryMaxAggregateOutputType | null
  }

  export type ScannerCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type ScannerCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type ScannerCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type ScannerCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ScannerCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ScannerCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type ScannerCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannerCategory to aggregate.
     */
    where?: ScannerCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerCategories to fetch.
     */
    orderBy?: ScannerCategoryOrderByWithRelationInput | ScannerCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScannerCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScannerCategories
    **/
    _count?: true | ScannerCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScannerCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScannerCategoryMaxAggregateInputType
  }

  export type GetScannerCategoryAggregateType<T extends ScannerCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateScannerCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScannerCategory[P]>
      : GetScalarType<T[P], AggregateScannerCategory[P]>
  }




  export type ScannerCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannerCategoryWhereInput
    orderBy?: ScannerCategoryOrderByWithAggregationInput | ScannerCategoryOrderByWithAggregationInput[]
    by: ScannerCategoryScalarFieldEnum[] | ScannerCategoryScalarFieldEnum
    having?: ScannerCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScannerCategoryCountAggregateInputType | true
    _min?: ScannerCategoryMinAggregateInputType
    _max?: ScannerCategoryMaxAggregateInputType
  }

  export type ScannerCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    _count: ScannerCategoryCountAggregateOutputType | null
    _min: ScannerCategoryMinAggregateOutputType | null
    _max: ScannerCategoryMaxAggregateOutputType | null
  }

  type GetScannerCategoryGroupByPayload<T extends ScannerCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScannerCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScannerCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScannerCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ScannerCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ScannerCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    products?: boolean | ScannerCategory$productsArgs<ExtArgs>
    _count?: boolean | ScannerCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scannerCategory"]>

  export type ScannerCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["scannerCategory"]>

  export type ScannerCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type ScannerCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ScannerCategory$productsArgs<ExtArgs>
    _count?: boolean | ScannerCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScannerCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ScannerCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScannerCategory"
    objects: {
      products: Prisma.$ScannerProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
    }, ExtArgs["result"]["scannerCategory"]>
    composites: {}
  }

  type ScannerCategoryGetPayload<S extends boolean | null | undefined | ScannerCategoryDefaultArgs> = $Result.GetResult<Prisma.$ScannerCategoryPayload, S>

  type ScannerCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScannerCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScannerCategoryCountAggregateInputType | true
    }

  export interface ScannerCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScannerCategory'], meta: { name: 'ScannerCategory' } }
    /**
     * Find zero or one ScannerCategory that matches the filter.
     * @param {ScannerCategoryFindUniqueArgs} args - Arguments to find a ScannerCategory
     * @example
     * // Get one ScannerCategory
     * const scannerCategory = await prisma.scannerCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScannerCategoryFindUniqueArgs>(args: SelectSubset<T, ScannerCategoryFindUniqueArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScannerCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScannerCategoryFindUniqueOrThrowArgs} args - Arguments to find a ScannerCategory
     * @example
     * // Get one ScannerCategory
     * const scannerCategory = await prisma.scannerCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScannerCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ScannerCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScannerCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryFindFirstArgs} args - Arguments to find a ScannerCategory
     * @example
     * // Get one ScannerCategory
     * const scannerCategory = await prisma.scannerCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScannerCategoryFindFirstArgs>(args?: SelectSubset<T, ScannerCategoryFindFirstArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScannerCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryFindFirstOrThrowArgs} args - Arguments to find a ScannerCategory
     * @example
     * // Get one ScannerCategory
     * const scannerCategory = await prisma.scannerCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScannerCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ScannerCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScannerCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScannerCategories
     * const scannerCategories = await prisma.scannerCategory.findMany()
     * 
     * // Get first 10 ScannerCategories
     * const scannerCategories = await prisma.scannerCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scannerCategoryWithIdOnly = await prisma.scannerCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScannerCategoryFindManyArgs>(args?: SelectSubset<T, ScannerCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScannerCategory.
     * @param {ScannerCategoryCreateArgs} args - Arguments to create a ScannerCategory.
     * @example
     * // Create one ScannerCategory
     * const ScannerCategory = await prisma.scannerCategory.create({
     *   data: {
     *     // ... data to create a ScannerCategory
     *   }
     * })
     * 
     */
    create<T extends ScannerCategoryCreateArgs>(args: SelectSubset<T, ScannerCategoryCreateArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScannerCategories.
     * @param {ScannerCategoryCreateManyArgs} args - Arguments to create many ScannerCategories.
     * @example
     * // Create many ScannerCategories
     * const scannerCategory = await prisma.scannerCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScannerCategoryCreateManyArgs>(args?: SelectSubset<T, ScannerCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScannerCategories and returns the data saved in the database.
     * @param {ScannerCategoryCreateManyAndReturnArgs} args - Arguments to create many ScannerCategories.
     * @example
     * // Create many ScannerCategories
     * const scannerCategory = await prisma.scannerCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScannerCategories and only return the `id`
     * const scannerCategoryWithIdOnly = await prisma.scannerCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScannerCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ScannerCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScannerCategory.
     * @param {ScannerCategoryDeleteArgs} args - Arguments to delete one ScannerCategory.
     * @example
     * // Delete one ScannerCategory
     * const ScannerCategory = await prisma.scannerCategory.delete({
     *   where: {
     *     // ... filter to delete one ScannerCategory
     *   }
     * })
     * 
     */
    delete<T extends ScannerCategoryDeleteArgs>(args: SelectSubset<T, ScannerCategoryDeleteArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScannerCategory.
     * @param {ScannerCategoryUpdateArgs} args - Arguments to update one ScannerCategory.
     * @example
     * // Update one ScannerCategory
     * const scannerCategory = await prisma.scannerCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScannerCategoryUpdateArgs>(args: SelectSubset<T, ScannerCategoryUpdateArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScannerCategories.
     * @param {ScannerCategoryDeleteManyArgs} args - Arguments to filter ScannerCategories to delete.
     * @example
     * // Delete a few ScannerCategories
     * const { count } = await prisma.scannerCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScannerCategoryDeleteManyArgs>(args?: SelectSubset<T, ScannerCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScannerCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScannerCategories
     * const scannerCategory = await prisma.scannerCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScannerCategoryUpdateManyArgs>(args: SelectSubset<T, ScannerCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScannerCategory.
     * @param {ScannerCategoryUpsertArgs} args - Arguments to update or create a ScannerCategory.
     * @example
     * // Update or create a ScannerCategory
     * const scannerCategory = await prisma.scannerCategory.upsert({
     *   create: {
     *     // ... data to create a ScannerCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScannerCategory we want to update
     *   }
     * })
     */
    upsert<T extends ScannerCategoryUpsertArgs>(args: SelectSubset<T, ScannerCategoryUpsertArgs<ExtArgs>>): Prisma__ScannerCategoryClient<$Result.GetResult<Prisma.$ScannerCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScannerCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryCountArgs} args - Arguments to filter ScannerCategories to count.
     * @example
     * // Count the number of ScannerCategories
     * const count = await prisma.scannerCategory.count({
     *   where: {
     *     // ... the filter for the ScannerCategories we want to count
     *   }
     * })
    **/
    count<T extends ScannerCategoryCountArgs>(
      args?: Subset<T, ScannerCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScannerCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScannerCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScannerCategoryAggregateArgs>(args: Subset<T, ScannerCategoryAggregateArgs>): Prisma.PrismaPromise<GetScannerCategoryAggregateType<T>>

    /**
     * Group by ScannerCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannerCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScannerCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScannerCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ScannerCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScannerCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScannerCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScannerCategory model
   */
  readonly fields: ScannerCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScannerCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScannerCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends ScannerCategory$productsArgs<ExtArgs> = {}>(args?: Subset<T, ScannerCategory$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannerProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScannerCategory model
   */ 
  interface ScannerCategoryFieldRefs {
    readonly id: FieldRef<"ScannerCategory", 'String'>
    readonly name: FieldRef<"ScannerCategory", 'String'>
    readonly description: FieldRef<"ScannerCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScannerCategory findUnique
   */
  export type ScannerCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ScannerCategory to fetch.
     */
    where: ScannerCategoryWhereUniqueInput
  }

  /**
   * ScannerCategory findUniqueOrThrow
   */
  export type ScannerCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ScannerCategory to fetch.
     */
    where: ScannerCategoryWhereUniqueInput
  }

  /**
   * ScannerCategory findFirst
   */
  export type ScannerCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ScannerCategory to fetch.
     */
    where?: ScannerCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerCategories to fetch.
     */
    orderBy?: ScannerCategoryOrderByWithRelationInput | ScannerCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannerCategories.
     */
    cursor?: ScannerCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannerCategories.
     */
    distinct?: ScannerCategoryScalarFieldEnum | ScannerCategoryScalarFieldEnum[]
  }

  /**
   * ScannerCategory findFirstOrThrow
   */
  export type ScannerCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ScannerCategory to fetch.
     */
    where?: ScannerCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerCategories to fetch.
     */
    orderBy?: ScannerCategoryOrderByWithRelationInput | ScannerCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannerCategories.
     */
    cursor?: ScannerCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannerCategories.
     */
    distinct?: ScannerCategoryScalarFieldEnum | ScannerCategoryScalarFieldEnum[]
  }

  /**
   * ScannerCategory findMany
   */
  export type ScannerCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ScannerCategories to fetch.
     */
    where?: ScannerCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannerCategories to fetch.
     */
    orderBy?: ScannerCategoryOrderByWithRelationInput | ScannerCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScannerCategories.
     */
    cursor?: ScannerCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannerCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannerCategories.
     */
    skip?: number
    distinct?: ScannerCategoryScalarFieldEnum | ScannerCategoryScalarFieldEnum[]
  }

  /**
   * ScannerCategory create
   */
  export type ScannerCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ScannerCategory.
     */
    data: XOR<ScannerCategoryCreateInput, ScannerCategoryUncheckedCreateInput>
  }

  /**
   * ScannerCategory createMany
   */
  export type ScannerCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScannerCategories.
     */
    data: ScannerCategoryCreateManyInput | ScannerCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScannerCategory createManyAndReturn
   */
  export type ScannerCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScannerCategories.
     */
    data: ScannerCategoryCreateManyInput | ScannerCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScannerCategory update
   */
  export type ScannerCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ScannerCategory.
     */
    data: XOR<ScannerCategoryUpdateInput, ScannerCategoryUncheckedUpdateInput>
    /**
     * Choose, which ScannerCategory to update.
     */
    where: ScannerCategoryWhereUniqueInput
  }

  /**
   * ScannerCategory updateMany
   */
  export type ScannerCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScannerCategories.
     */
    data: XOR<ScannerCategoryUpdateManyMutationInput, ScannerCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ScannerCategories to update
     */
    where?: ScannerCategoryWhereInput
  }

  /**
   * ScannerCategory upsert
   */
  export type ScannerCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ScannerCategory to update in case it exists.
     */
    where: ScannerCategoryWhereUniqueInput
    /**
     * In case the ScannerCategory found by the `where` argument doesn't exist, create a new ScannerCategory with this data.
     */
    create: XOR<ScannerCategoryCreateInput, ScannerCategoryUncheckedCreateInput>
    /**
     * In case the ScannerCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScannerCategoryUpdateInput, ScannerCategoryUncheckedUpdateInput>
  }

  /**
   * ScannerCategory delete
   */
  export type ScannerCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
    /**
     * Filter which ScannerCategory to delete.
     */
    where: ScannerCategoryWhereUniqueInput
  }

  /**
   * ScannerCategory deleteMany
   */
  export type ScannerCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannerCategories to delete
     */
    where?: ScannerCategoryWhereInput
  }

  /**
   * ScannerCategory.products
   */
  export type ScannerCategory$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerProduct
     */
    select?: ScannerProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerProductInclude<ExtArgs> | null
    where?: ScannerProductWhereInput
    orderBy?: ScannerProductOrderByWithRelationInput | ScannerProductOrderByWithRelationInput[]
    cursor?: ScannerProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScannerProductScalarFieldEnum | ScannerProductScalarFieldEnum[]
  }

  /**
   * ScannerCategory without action
   */
  export type ScannerCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannerCategory
     */
    select?: ScannerCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannerCategoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ScannerProductScalarFieldEnum: {
    id: 'id',
    barcode: 'barcode',
    name: 'name',
    brand: 'brand',
    categoryId: 'categoryId',
    createdAt: 'createdAt'
  };

  export type ScannerProductScalarFieldEnum = (typeof ScannerProductScalarFieldEnum)[keyof typeof ScannerProductScalarFieldEnum]


  export const ScannerProductScanScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    price: 'price',
    imageUrl: 'imageUrl',
    qualityScore: 'qualityScore',
    shopName: 'shopName',
    location: 'location',
    externalUserId: 'externalUserId',
    latitude: 'latitude',
    longitude: 'longitude',
    createdAt: 'createdAt'
  };

  export type ScannerProductScanScalarFieldEnum = (typeof ScannerProductScanScalarFieldEnum)[keyof typeof ScannerProductScanScalarFieldEnum]


  export const ScannerCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type ScannerCategoryScalarFieldEnum = (typeof ScannerCategoryScalarFieldEnum)[keyof typeof ScannerCategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type ScannerProductWhereInput = {
    AND?: ScannerProductWhereInput | ScannerProductWhereInput[]
    OR?: ScannerProductWhereInput[]
    NOT?: ScannerProductWhereInput | ScannerProductWhereInput[]
    id?: StringFilter<"ScannerProduct"> | string
    barcode?: StringFilter<"ScannerProduct"> | string
    name?: StringNullableFilter<"ScannerProduct"> | string | null
    brand?: StringNullableFilter<"ScannerProduct"> | string | null
    categoryId?: StringFilter<"ScannerProduct"> | string
    createdAt?: DateTimeFilter<"ScannerProduct"> | Date | string
    category?: XOR<ScannerCategoryRelationFilter, ScannerCategoryWhereInput>
    scans?: ScannerProductScanListRelationFilter
  }

  export type ScannerProductOrderByWithRelationInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    category?: ScannerCategoryOrderByWithRelationInput
    scans?: ScannerProductScanOrderByRelationAggregateInput
  }

  export type ScannerProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    barcode?: string
    AND?: ScannerProductWhereInput | ScannerProductWhereInput[]
    OR?: ScannerProductWhereInput[]
    NOT?: ScannerProductWhereInput | ScannerProductWhereInput[]
    name?: StringNullableFilter<"ScannerProduct"> | string | null
    brand?: StringNullableFilter<"ScannerProduct"> | string | null
    categoryId?: StringFilter<"ScannerProduct"> | string
    createdAt?: DateTimeFilter<"ScannerProduct"> | Date | string
    category?: XOR<ScannerCategoryRelationFilter, ScannerCategoryWhereInput>
    scans?: ScannerProductScanListRelationFilter
  }, "id" | "barcode">

  export type ScannerProductOrderByWithAggregationInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrderInput | SortOrder
    brand?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    _count?: ScannerProductCountOrderByAggregateInput
    _max?: ScannerProductMaxOrderByAggregateInput
    _min?: ScannerProductMinOrderByAggregateInput
  }

  export type ScannerProductScalarWhereWithAggregatesInput = {
    AND?: ScannerProductScalarWhereWithAggregatesInput | ScannerProductScalarWhereWithAggregatesInput[]
    OR?: ScannerProductScalarWhereWithAggregatesInput[]
    NOT?: ScannerProductScalarWhereWithAggregatesInput | ScannerProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScannerProduct"> | string
    barcode?: StringWithAggregatesFilter<"ScannerProduct"> | string
    name?: StringNullableWithAggregatesFilter<"ScannerProduct"> | string | null
    brand?: StringNullableWithAggregatesFilter<"ScannerProduct"> | string | null
    categoryId?: StringWithAggregatesFilter<"ScannerProduct"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ScannerProduct"> | Date | string
  }

  export type ScannerProductScanWhereInput = {
    AND?: ScannerProductScanWhereInput | ScannerProductScanWhereInput[]
    OR?: ScannerProductScanWhereInput[]
    NOT?: ScannerProductScanWhereInput | ScannerProductScanWhereInput[]
    id?: StringFilter<"ScannerProductScan"> | string
    productId?: StringFilter<"ScannerProductScan"> | string
    price?: FloatFilter<"ScannerProductScan"> | number
    imageUrl?: StringFilter<"ScannerProductScan"> | string
    qualityScore?: StringFilter<"ScannerProductScan"> | string
    shopName?: StringFilter<"ScannerProductScan"> | string
    location?: StringFilter<"ScannerProductScan"> | string
    externalUserId?: StringNullableFilter<"ScannerProductScan"> | string | null
    latitude?: FloatNullableFilter<"ScannerProductScan"> | number | null
    longitude?: FloatNullableFilter<"ScannerProductScan"> | number | null
    createdAt?: DateTimeFilter<"ScannerProductScan"> | Date | string
    product?: XOR<ScannerProductRelationFilter, ScannerProductWhereInput>
  }

  export type ScannerProductScanOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    qualityScore?: SortOrder
    shopName?: SortOrder
    location?: SortOrder
    externalUserId?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    product?: ScannerProductOrderByWithRelationInput
  }

  export type ScannerProductScanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScannerProductScanWhereInput | ScannerProductScanWhereInput[]
    OR?: ScannerProductScanWhereInput[]
    NOT?: ScannerProductScanWhereInput | ScannerProductScanWhereInput[]
    productId?: StringFilter<"ScannerProductScan"> | string
    price?: FloatFilter<"ScannerProductScan"> | number
    imageUrl?: StringFilter<"ScannerProductScan"> | string
    qualityScore?: StringFilter<"ScannerProductScan"> | string
    shopName?: StringFilter<"ScannerProductScan"> | string
    location?: StringFilter<"ScannerProductScan"> | string
    externalUserId?: StringNullableFilter<"ScannerProductScan"> | string | null
    latitude?: FloatNullableFilter<"ScannerProductScan"> | number | null
    longitude?: FloatNullableFilter<"ScannerProductScan"> | number | null
    createdAt?: DateTimeFilter<"ScannerProductScan"> | Date | string
    product?: XOR<ScannerProductRelationFilter, ScannerProductWhereInput>
  }, "id">

  export type ScannerProductScanOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    qualityScore?: SortOrder
    shopName?: SortOrder
    location?: SortOrder
    externalUserId?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ScannerProductScanCountOrderByAggregateInput
    _avg?: ScannerProductScanAvgOrderByAggregateInput
    _max?: ScannerProductScanMaxOrderByAggregateInput
    _min?: ScannerProductScanMinOrderByAggregateInput
    _sum?: ScannerProductScanSumOrderByAggregateInput
  }

  export type ScannerProductScanScalarWhereWithAggregatesInput = {
    AND?: ScannerProductScanScalarWhereWithAggregatesInput | ScannerProductScanScalarWhereWithAggregatesInput[]
    OR?: ScannerProductScanScalarWhereWithAggregatesInput[]
    NOT?: ScannerProductScanScalarWhereWithAggregatesInput | ScannerProductScanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScannerProductScan"> | string
    productId?: StringWithAggregatesFilter<"ScannerProductScan"> | string
    price?: FloatWithAggregatesFilter<"ScannerProductScan"> | number
    imageUrl?: StringWithAggregatesFilter<"ScannerProductScan"> | string
    qualityScore?: StringWithAggregatesFilter<"ScannerProductScan"> | string
    shopName?: StringWithAggregatesFilter<"ScannerProductScan"> | string
    location?: StringWithAggregatesFilter<"ScannerProductScan"> | string
    externalUserId?: StringNullableWithAggregatesFilter<"ScannerProductScan"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"ScannerProductScan"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"ScannerProductScan"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ScannerProductScan"> | Date | string
  }

  export type ScannerCategoryWhereInput = {
    AND?: ScannerCategoryWhereInput | ScannerCategoryWhereInput[]
    OR?: ScannerCategoryWhereInput[]
    NOT?: ScannerCategoryWhereInput | ScannerCategoryWhereInput[]
    id?: StringFilter<"ScannerCategory"> | string
    name?: StringFilter<"ScannerCategory"> | string
    description?: StringNullableFilter<"ScannerCategory"> | string | null
    products?: ScannerProductListRelationFilter
  }

  export type ScannerCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    products?: ScannerProductOrderByRelationAggregateInput
  }

  export type ScannerCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ScannerCategoryWhereInput | ScannerCategoryWhereInput[]
    OR?: ScannerCategoryWhereInput[]
    NOT?: ScannerCategoryWhereInput | ScannerCategoryWhereInput[]
    description?: StringNullableFilter<"ScannerCategory"> | string | null
    products?: ScannerProductListRelationFilter
  }, "id" | "name">

  export type ScannerCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ScannerCategoryCountOrderByAggregateInput
    _max?: ScannerCategoryMaxOrderByAggregateInput
    _min?: ScannerCategoryMinOrderByAggregateInput
  }

  export type ScannerCategoryScalarWhereWithAggregatesInput = {
    AND?: ScannerCategoryScalarWhereWithAggregatesInput | ScannerCategoryScalarWhereWithAggregatesInput[]
    OR?: ScannerCategoryScalarWhereWithAggregatesInput[]
    NOT?: ScannerCategoryScalarWhereWithAggregatesInput | ScannerCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScannerCategory"> | string
    name?: StringWithAggregatesFilter<"ScannerCategory"> | string
    description?: StringNullableWithAggregatesFilter<"ScannerCategory"> | string | null
  }

  export type ScannerProductCreateInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    createdAt?: Date | string
    category: ScannerCategoryCreateNestedOneWithoutProductsInput
    scans?: ScannerProductScanCreateNestedManyWithoutProductInput
  }

  export type ScannerProductUncheckedCreateInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    categoryId: string
    createdAt?: Date | string
    scans?: ScannerProductScanUncheckedCreateNestedManyWithoutProductInput
  }

  export type ScannerProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ScannerCategoryUpdateOneRequiredWithoutProductsNestedInput
    scans?: ScannerProductScanUpdateManyWithoutProductNestedInput
  }

  export type ScannerProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scans?: ScannerProductScanUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ScannerProductCreateManyInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    categoryId: string
    createdAt?: Date | string
  }

  export type ScannerProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductScanCreateInput = {
    id?: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    product: ScannerProductCreateNestedOneWithoutScansInput
  }

  export type ScannerProductScanUncheckedCreateInput = {
    id?: string
    productId: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
  }

  export type ScannerProductScanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ScannerProductUpdateOneRequiredWithoutScansNestedInput
  }

  export type ScannerProductScanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductScanCreateManyInput = {
    id?: string
    productId: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
  }

  export type ScannerProductScanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductScanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    products?: ScannerProductCreateNestedManyWithoutCategoryInput
  }

  export type ScannerCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    products?: ScannerProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ScannerCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ScannerProductUpdateManyWithoutCategoryNestedInput
  }

  export type ScannerCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ScannerProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ScannerCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ScannerCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScannerCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ScannerCategoryRelationFilter = {
    is?: ScannerCategoryWhereInput
    isNot?: ScannerCategoryWhereInput
  }

  export type ScannerProductScanListRelationFilter = {
    every?: ScannerProductScanWhereInput
    some?: ScannerProductScanWhereInput
    none?: ScannerProductScanWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ScannerProductScanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScannerProductCountOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannerProductMaxOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannerProductMinOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ScannerProductRelationFilter = {
    is?: ScannerProductWhereInput
    isNot?: ScannerProductWhereInput
  }

  export type ScannerProductScanCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    qualityScore?: SortOrder
    shopName?: SortOrder
    location?: SortOrder
    externalUserId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannerProductScanAvgOrderByAggregateInput = {
    price?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ScannerProductScanMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    qualityScore?: SortOrder
    shopName?: SortOrder
    location?: SortOrder
    externalUserId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannerProductScanMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    qualityScore?: SortOrder
    shopName?: SortOrder
    location?: SortOrder
    externalUserId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannerProductScanSumOrderByAggregateInput = {
    price?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ScannerProductListRelationFilter = {
    every?: ScannerProductWhereInput
    some?: ScannerProductWhereInput
    none?: ScannerProductWhereInput
  }

  export type ScannerProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScannerCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ScannerCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ScannerCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ScannerCategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<ScannerCategoryCreateWithoutProductsInput, ScannerCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ScannerCategoryCreateOrConnectWithoutProductsInput
    connect?: ScannerCategoryWhereUniqueInput
  }

  export type ScannerProductScanCreateNestedManyWithoutProductInput = {
    create?: XOR<ScannerProductScanCreateWithoutProductInput, ScannerProductScanUncheckedCreateWithoutProductInput> | ScannerProductScanCreateWithoutProductInput[] | ScannerProductScanUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ScannerProductScanCreateOrConnectWithoutProductInput | ScannerProductScanCreateOrConnectWithoutProductInput[]
    createMany?: ScannerProductScanCreateManyProductInputEnvelope
    connect?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
  }

  export type ScannerProductScanUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ScannerProductScanCreateWithoutProductInput, ScannerProductScanUncheckedCreateWithoutProductInput> | ScannerProductScanCreateWithoutProductInput[] | ScannerProductScanUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ScannerProductScanCreateOrConnectWithoutProductInput | ScannerProductScanCreateOrConnectWithoutProductInput[]
    createMany?: ScannerProductScanCreateManyProductInputEnvelope
    connect?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ScannerCategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<ScannerCategoryCreateWithoutProductsInput, ScannerCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ScannerCategoryCreateOrConnectWithoutProductsInput
    upsert?: ScannerCategoryUpsertWithoutProductsInput
    connect?: ScannerCategoryWhereUniqueInput
    update?: XOR<XOR<ScannerCategoryUpdateToOneWithWhereWithoutProductsInput, ScannerCategoryUpdateWithoutProductsInput>, ScannerCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type ScannerProductScanUpdateManyWithoutProductNestedInput = {
    create?: XOR<ScannerProductScanCreateWithoutProductInput, ScannerProductScanUncheckedCreateWithoutProductInput> | ScannerProductScanCreateWithoutProductInput[] | ScannerProductScanUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ScannerProductScanCreateOrConnectWithoutProductInput | ScannerProductScanCreateOrConnectWithoutProductInput[]
    upsert?: ScannerProductScanUpsertWithWhereUniqueWithoutProductInput | ScannerProductScanUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ScannerProductScanCreateManyProductInputEnvelope
    set?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    disconnect?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    delete?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    connect?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    update?: ScannerProductScanUpdateWithWhereUniqueWithoutProductInput | ScannerProductScanUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ScannerProductScanUpdateManyWithWhereWithoutProductInput | ScannerProductScanUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ScannerProductScanScalarWhereInput | ScannerProductScanScalarWhereInput[]
  }

  export type ScannerProductScanUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ScannerProductScanCreateWithoutProductInput, ScannerProductScanUncheckedCreateWithoutProductInput> | ScannerProductScanCreateWithoutProductInput[] | ScannerProductScanUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ScannerProductScanCreateOrConnectWithoutProductInput | ScannerProductScanCreateOrConnectWithoutProductInput[]
    upsert?: ScannerProductScanUpsertWithWhereUniqueWithoutProductInput | ScannerProductScanUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ScannerProductScanCreateManyProductInputEnvelope
    set?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    disconnect?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    delete?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    connect?: ScannerProductScanWhereUniqueInput | ScannerProductScanWhereUniqueInput[]
    update?: ScannerProductScanUpdateWithWhereUniqueWithoutProductInput | ScannerProductScanUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ScannerProductScanUpdateManyWithWhereWithoutProductInput | ScannerProductScanUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ScannerProductScanScalarWhereInput | ScannerProductScanScalarWhereInput[]
  }

  export type ScannerProductCreateNestedOneWithoutScansInput = {
    create?: XOR<ScannerProductCreateWithoutScansInput, ScannerProductUncheckedCreateWithoutScansInput>
    connectOrCreate?: ScannerProductCreateOrConnectWithoutScansInput
    connect?: ScannerProductWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ScannerProductUpdateOneRequiredWithoutScansNestedInput = {
    create?: XOR<ScannerProductCreateWithoutScansInput, ScannerProductUncheckedCreateWithoutScansInput>
    connectOrCreate?: ScannerProductCreateOrConnectWithoutScansInput
    upsert?: ScannerProductUpsertWithoutScansInput
    connect?: ScannerProductWhereUniqueInput
    update?: XOR<XOR<ScannerProductUpdateToOneWithWhereWithoutScansInput, ScannerProductUpdateWithoutScansInput>, ScannerProductUncheckedUpdateWithoutScansInput>
  }

  export type ScannerProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ScannerProductCreateWithoutCategoryInput, ScannerProductUncheckedCreateWithoutCategoryInput> | ScannerProductCreateWithoutCategoryInput[] | ScannerProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScannerProductCreateOrConnectWithoutCategoryInput | ScannerProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ScannerProductCreateManyCategoryInputEnvelope
    connect?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
  }

  export type ScannerProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ScannerProductCreateWithoutCategoryInput, ScannerProductUncheckedCreateWithoutCategoryInput> | ScannerProductCreateWithoutCategoryInput[] | ScannerProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScannerProductCreateOrConnectWithoutCategoryInput | ScannerProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ScannerProductCreateManyCategoryInputEnvelope
    connect?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
  }

  export type ScannerProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ScannerProductCreateWithoutCategoryInput, ScannerProductUncheckedCreateWithoutCategoryInput> | ScannerProductCreateWithoutCategoryInput[] | ScannerProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScannerProductCreateOrConnectWithoutCategoryInput | ScannerProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ScannerProductUpsertWithWhereUniqueWithoutCategoryInput | ScannerProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ScannerProductCreateManyCategoryInputEnvelope
    set?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    disconnect?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    delete?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    connect?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    update?: ScannerProductUpdateWithWhereUniqueWithoutCategoryInput | ScannerProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ScannerProductUpdateManyWithWhereWithoutCategoryInput | ScannerProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ScannerProductScalarWhereInput | ScannerProductScalarWhereInput[]
  }

  export type ScannerProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ScannerProductCreateWithoutCategoryInput, ScannerProductUncheckedCreateWithoutCategoryInput> | ScannerProductCreateWithoutCategoryInput[] | ScannerProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ScannerProductCreateOrConnectWithoutCategoryInput | ScannerProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ScannerProductUpsertWithWhereUniqueWithoutCategoryInput | ScannerProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ScannerProductCreateManyCategoryInputEnvelope
    set?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    disconnect?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    delete?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    connect?: ScannerProductWhereUniqueInput | ScannerProductWhereUniqueInput[]
    update?: ScannerProductUpdateWithWhereUniqueWithoutCategoryInput | ScannerProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ScannerProductUpdateManyWithWhereWithoutCategoryInput | ScannerProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ScannerProductScalarWhereInput | ScannerProductScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ScannerCategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ScannerCategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ScannerCategoryCreateOrConnectWithoutProductsInput = {
    where: ScannerCategoryWhereUniqueInput
    create: XOR<ScannerCategoryCreateWithoutProductsInput, ScannerCategoryUncheckedCreateWithoutProductsInput>
  }

  export type ScannerProductScanCreateWithoutProductInput = {
    id?: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
  }

  export type ScannerProductScanUncheckedCreateWithoutProductInput = {
    id?: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
  }

  export type ScannerProductScanCreateOrConnectWithoutProductInput = {
    where: ScannerProductScanWhereUniqueInput
    create: XOR<ScannerProductScanCreateWithoutProductInput, ScannerProductScanUncheckedCreateWithoutProductInput>
  }

  export type ScannerProductScanCreateManyProductInputEnvelope = {
    data: ScannerProductScanCreateManyProductInput | ScannerProductScanCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ScannerCategoryUpsertWithoutProductsInput = {
    update: XOR<ScannerCategoryUpdateWithoutProductsInput, ScannerCategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<ScannerCategoryCreateWithoutProductsInput, ScannerCategoryUncheckedCreateWithoutProductsInput>
    where?: ScannerCategoryWhereInput
  }

  export type ScannerCategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: ScannerCategoryWhereInput
    data: XOR<ScannerCategoryUpdateWithoutProductsInput, ScannerCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type ScannerCategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScannerCategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScannerProductScanUpsertWithWhereUniqueWithoutProductInput = {
    where: ScannerProductScanWhereUniqueInput
    update: XOR<ScannerProductScanUpdateWithoutProductInput, ScannerProductScanUncheckedUpdateWithoutProductInput>
    create: XOR<ScannerProductScanCreateWithoutProductInput, ScannerProductScanUncheckedCreateWithoutProductInput>
  }

  export type ScannerProductScanUpdateWithWhereUniqueWithoutProductInput = {
    where: ScannerProductScanWhereUniqueInput
    data: XOR<ScannerProductScanUpdateWithoutProductInput, ScannerProductScanUncheckedUpdateWithoutProductInput>
  }

  export type ScannerProductScanUpdateManyWithWhereWithoutProductInput = {
    where: ScannerProductScanScalarWhereInput
    data: XOR<ScannerProductScanUpdateManyMutationInput, ScannerProductScanUncheckedUpdateManyWithoutProductInput>
  }

  export type ScannerProductScanScalarWhereInput = {
    AND?: ScannerProductScanScalarWhereInput | ScannerProductScanScalarWhereInput[]
    OR?: ScannerProductScanScalarWhereInput[]
    NOT?: ScannerProductScanScalarWhereInput | ScannerProductScanScalarWhereInput[]
    id?: StringFilter<"ScannerProductScan"> | string
    productId?: StringFilter<"ScannerProductScan"> | string
    price?: FloatFilter<"ScannerProductScan"> | number
    imageUrl?: StringFilter<"ScannerProductScan"> | string
    qualityScore?: StringFilter<"ScannerProductScan"> | string
    shopName?: StringFilter<"ScannerProductScan"> | string
    location?: StringFilter<"ScannerProductScan"> | string
    externalUserId?: StringNullableFilter<"ScannerProductScan"> | string | null
    latitude?: FloatNullableFilter<"ScannerProductScan"> | number | null
    longitude?: FloatNullableFilter<"ScannerProductScan"> | number | null
    createdAt?: DateTimeFilter<"ScannerProductScan"> | Date | string
  }

  export type ScannerProductCreateWithoutScansInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    createdAt?: Date | string
    category: ScannerCategoryCreateNestedOneWithoutProductsInput
  }

  export type ScannerProductUncheckedCreateWithoutScansInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    categoryId: string
    createdAt?: Date | string
  }

  export type ScannerProductCreateOrConnectWithoutScansInput = {
    where: ScannerProductWhereUniqueInput
    create: XOR<ScannerProductCreateWithoutScansInput, ScannerProductUncheckedCreateWithoutScansInput>
  }

  export type ScannerProductUpsertWithoutScansInput = {
    update: XOR<ScannerProductUpdateWithoutScansInput, ScannerProductUncheckedUpdateWithoutScansInput>
    create: XOR<ScannerProductCreateWithoutScansInput, ScannerProductUncheckedCreateWithoutScansInput>
    where?: ScannerProductWhereInput
  }

  export type ScannerProductUpdateToOneWithWhereWithoutScansInput = {
    where?: ScannerProductWhereInput
    data: XOR<ScannerProductUpdateWithoutScansInput, ScannerProductUncheckedUpdateWithoutScansInput>
  }

  export type ScannerProductUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ScannerCategoryUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ScannerProductUncheckedUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductCreateWithoutCategoryInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    createdAt?: Date | string
    scans?: ScannerProductScanCreateNestedManyWithoutProductInput
  }

  export type ScannerProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    createdAt?: Date | string
    scans?: ScannerProductScanUncheckedCreateNestedManyWithoutProductInput
  }

  export type ScannerProductCreateOrConnectWithoutCategoryInput = {
    where: ScannerProductWhereUniqueInput
    create: XOR<ScannerProductCreateWithoutCategoryInput, ScannerProductUncheckedCreateWithoutCategoryInput>
  }

  export type ScannerProductCreateManyCategoryInputEnvelope = {
    data: ScannerProductCreateManyCategoryInput | ScannerProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ScannerProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ScannerProductWhereUniqueInput
    update: XOR<ScannerProductUpdateWithoutCategoryInput, ScannerProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ScannerProductCreateWithoutCategoryInput, ScannerProductUncheckedCreateWithoutCategoryInput>
  }

  export type ScannerProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ScannerProductWhereUniqueInput
    data: XOR<ScannerProductUpdateWithoutCategoryInput, ScannerProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ScannerProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ScannerProductScalarWhereInput
    data: XOR<ScannerProductUpdateManyMutationInput, ScannerProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ScannerProductScalarWhereInput = {
    AND?: ScannerProductScalarWhereInput | ScannerProductScalarWhereInput[]
    OR?: ScannerProductScalarWhereInput[]
    NOT?: ScannerProductScalarWhereInput | ScannerProductScalarWhereInput[]
    id?: StringFilter<"ScannerProduct"> | string
    barcode?: StringFilter<"ScannerProduct"> | string
    name?: StringNullableFilter<"ScannerProduct"> | string | null
    brand?: StringNullableFilter<"ScannerProduct"> | string | null
    categoryId?: StringFilter<"ScannerProduct"> | string
    createdAt?: DateTimeFilter<"ScannerProduct"> | Date | string
  }

  export type ScannerProductScanCreateManyProductInput = {
    id?: string
    price: number
    imageUrl: string
    qualityScore: string
    shopName: string
    location: string
    externalUserId?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
  }

  export type ScannerProductScanUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductScanUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductScanUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    qualityScore?: StringFieldUpdateOperationsInput | string
    shopName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    externalUserId?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannerProductCreateManyCategoryInput = {
    id?: string
    barcode: string
    name?: string | null
    brand?: string | null
    createdAt?: Date | string
  }

  export type ScannerProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scans?: ScannerProductScanUpdateManyWithoutProductNestedInput
  }

  export type ScannerProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scans?: ScannerProductScanUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ScannerProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ScannerProductCountOutputTypeDefaultArgs instead
     */
    export type ScannerProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScannerProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScannerCategoryCountOutputTypeDefaultArgs instead
     */
    export type ScannerCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScannerCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScannerProductDefaultArgs instead
     */
    export type ScannerProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScannerProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScannerProductScanDefaultArgs instead
     */
    export type ScannerProductScanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScannerProductScanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScannerCategoryDefaultArgs instead
     */
    export type ScannerCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScannerCategoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}